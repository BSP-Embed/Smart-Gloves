
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a1  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000390  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027c  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002be  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__vector_1>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	7b c0       	rjmp	.+246    	; 0x104 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	02 d0       	rcall	.+4      	; 0x44 <main>
  40:	bf c0       	rjmp	.+382    	; 0x1c0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <main>:
	while (TRUE)
		sleep_cpu(); 
	return 0;
}
static void init(void) {
	ledinit();
  44:	97 d0       	rcall	.+302    	; 0x174 <ledinit>
	blink(1,150);
  46:	66 e9       	ldi	r22, 0x96	; 150
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	97 d0       	rcall	.+302    	; 0x17a <blink>
	LightInit();
  4c:	ab d0       	rcall	.+342    	; 0x1a4 <LightInit>
	FanInit();
  4e:	8b d0       	rcall	.+278    	; 0x166 <FanInit>
		case 4: FanOff(); break;
	}
	GIMSK |= _BV(INT0);
}
static void Tmr0Init(void) {
	TCNT0   =  60;						/* OverFlows every 25msec */
  50:	8c e3       	ldi	r24, 0x3C	; 60
  52:	82 bf       	out	0x32, r24	; 50
	TIMSK   |= _BV(TOIE0);				/*ENABLE OVERFLOW INTERRUPT */
  54:	89 b7       	in	r24, 0x39	; 57
  56:	82 60       	ori	r24, 0x02	; 2
  58:	89 bf       	out	0x39, r24	; 57
	TCCR0B	|= _BV(CS02) | _BV(CS00);	/* Prescalar by 1024 */
  5a:	83 b7       	in	r24, 0x33	; 51
  5c:	85 60       	ori	r24, 0x05	; 5
  5e:	83 bf       	out	0x33, r24	; 51
	ledinit();
	blink(1,150);
	LightInit();
	FanInit();
	Tmr0Init();
	RFRxInit();
  60:	a8 d0       	rcall	.+336    	; 0x1b2 <RFRxInit>
	sei();
	sleep_enable();
	sleep_cpu(); 
}
static void EXT0init(void) {
	INTDDR 	&= ~_BV(INT0_PIN);
  62:	8a 98       	cbi	0x11, 2	; 17
	INTPORT |= _BV(INT0_PIN);
  64:	92 9a       	sbi	0x12, 2	; 18
	GIMSK |= _BV(INT0);			//ENABLE EXTERNAL INTERRUPT
  66:	8b b7       	in	r24, 0x3b	; 59
  68:	80 64       	ori	r24, 0x40	; 64
  6a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= _BV(ISC01);		//FALLING EDGE INTERRUPT
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	85 bf       	out	0x35, r24	; 53
	LightInit();
	FanInit();
	Tmr0Init();
	RFRxInit();
	EXT0init();
	sei();
  72:	78 94       	sei
	sleep_enable();
  74:	85 b7       	in	r24, 0x35	; 53
  76:	80 62       	ori	r24, 0x20	; 32
  78:	85 bf       	out	0x35, r24	; 53
	sleep_cpu(); 
  7a:	88 95       	sleep
#include "main.h"

int main(void) {
	init();
	while (TRUE)
		sleep_cpu(); 
  7c:	88 95       	sleep
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x38>

00000080 <__vector_1>:
	INTDDR 	&= ~_BV(INT0_PIN);
	INTPORT |= _BV(INT0_PIN);
	GIMSK |= _BV(INT0);			//ENABLE EXTERNAL INTERRUPT
	MCUCR |= _BV(ISC01);		//FALLING EDGE INTERRUPT
}
ISR(INT0_vect) {
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	5f 93       	push	r21
  92:	6f 93       	push	r22
  94:	7f 93       	push	r23
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	switch ((RF_PPIN & 0x78) >> 3) {
  a2:	80 b3       	in	r24, 0x10	; 16
  a4:	88 77       	andi	r24, 0x78	; 120
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	95 95       	asr	r25
  aa:	87 95       	ror	r24
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	61 f0       	breq	.+24     	; 0xd2 <__vector_1+0x52>
  ba:	1c f4       	brge	.+6      	; 0xc2 <__vector_1+0x42>
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	39 f0       	breq	.+14     	; 0xce <__vector_1+0x4e>
  c0:	0d c0       	rjmp	.+26     	; 0xdc <__vector_1+0x5c>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	91 05       	cpc	r25, r1
  c6:	39 f0       	breq	.+14     	; 0xd6 <__vector_1+0x56>
  c8:	04 97       	sbiw	r24, 0x04	; 4
  ca:	39 f0       	breq	.+14     	; 0xda <__vector_1+0x5a>
  cc:	07 c0       	rjmp	.+14     	; 0xdc <__vector_1+0x5c>
		case 1: LightOn(); break;
  ce:	6d d0       	rcall	.+218    	; 0x1aa <LightOn>
  d0:	05 c0       	rjmp	.+10     	; 0xdc <__vector_1+0x5c>
		case 2: LightOff(); break;
  d2:	6d d0       	rcall	.+218    	; 0x1ae <LightOff>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <__vector_1+0x5c>
		case 3: FanOn(); break;
  d6:	4a d0       	rcall	.+148    	; 0x16c <FanOn>
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_1+0x5c>
		case 4: FanOff(); break;
  da:	4a d0       	rcall	.+148    	; 0x170 <FanOff>
	}
	GIMSK |= _BV(INT0);
  dc:	8b b7       	in	r24, 0x3b	; 59
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8b bf       	out	0x3b, r24	; 59
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_6>:
static void Tmr0Init(void) {
	TCNT0   =  60;						/* OverFlows every 25msec */
	TIMSK   |= _BV(TOIE0);				/*ENABLE OVERFLOW INTERRUPT */
	TCCR0B	|= _BV(CS02) | _BV(CS00);	/* Prescalar by 1024 */
}
ISR(TIMER0_OVF_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	static int8u i,j;
	TCNT0 = 60;
 110:	8c e3       	ldi	r24, 0x3C	; 60
 112:	82 bf       	out	0x32, r24	; 50
	if (++i >= 200)
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 60 00 	sts	0x0060, r24
 11e:	88 3c       	cpi	r24, 0xC8	; 200
 120:	18 f0       	brcs	.+6      	; 0x128 <__vector_6+0x24>
		i = 0;
 122:	10 92 60 00 	sts	0x0060, r1
 126:	0b c0       	rjmp	.+22     	; 0x13e <__vector_6+0x3a>
	switch(i) {
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	59 f0       	breq	.+22     	; 0x142 <__vector_6+0x3e>
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_6+0x30>
 12e:	81 11       	cpse	r24, r1
 130:	09 c0       	rjmp	.+18     	; 0x144 <__vector_6+0x40>
 132:	05 c0       	rjmp	.+10     	; 0x13e <__vector_6+0x3a>
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	19 f0       	breq	.+6      	; 0x13e <__vector_6+0x3a>
 138:	86 30       	cpi	r24, 0x06	; 6
 13a:	19 f0       	breq	.+6      	; 0x142 <__vector_6+0x3e>
 13c:	03 c0       	rjmp	.+6      	; 0x144 <__vector_6+0x40>
			case 0: case 4: ledon(); break;
 13e:	c2 9a       	sbi	0x18, 2	; 24
 140:	01 c0       	rjmp	.+2      	; 0x144 <__vector_6+0x40>
			case 2: case 6: ledoff(); break;
 142:	c2 98       	cbi	0x18, 2	; 24
	}
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <dlyms>:
 *  Author: bsp
 */ 
#include "dly.h"

void dlyms(int16u dly) {
	while (dly--)
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	41 f0       	breq	.+16     	; 0x164 <dlyms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	ef ec       	ldi	r30, 0xCF	; 207
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <dlyms+0x8>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <dlyms+0xe>
 15e:	00 00       	nop
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	c1 f7       	brne	.-16     	; 0x154 <dlyms+0x4>
 164:	08 95       	ret

00000166 <FanInit>:
#include "fan.h"

void FanInit(void) {
	FAN_DDR 	|= _BV(FAN_PIN);
 166:	b9 9a       	sbi	0x17, 1	; 23
	FAN_PORT 	&= ~_BV(FAN_PIN);
 168:	c1 98       	cbi	0x18, 1	; 24
 16a:	08 95       	ret

0000016c <FanOn>:
}
void FanOn(void) {
	FAN_PORT |= _BV(FAN_PIN);
 16c:	c1 9a       	sbi	0x18, 1	; 24
 16e:	08 95       	ret

00000170 <FanOff>:
}
void FanOff(void) {
	FAN_PORT &= ~_BV(FAN_PIN);
 170:	c1 98       	cbi	0x18, 1	; 24
 172:	08 95       	ret

00000174 <ledinit>:
/* led.c : LED interface programs */
#include "led.h"

void ledinit(void)
{
	LED_DDR 		|= _BV(LED_PIN);
 174:	ba 9a       	sbi	0x17, 2	; 23
	LED_PORT 		&= ~_BV(LED_PIN);
 176:	c2 98       	cbi	0x18, 2	; 24
 178:	08 95       	ret

0000017a <blink>:
}

void blink(int8u nblink, int8u ontime){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
	while(nblink--){
 180:	88 23       	and	r24, r24
 182:	61 f0       	breq	.+24     	; 0x19c <blink+0x22>
 184:	c8 2f       	mov	r28, r24
		ledon();
		dlyms(ontime);
 186:	06 2f       	mov	r16, r22
 188:	10 e0       	ldi	r17, 0x00	; 0
	LED_PORT 		&= ~_BV(LED_PIN);
}

void blink(int8u nblink, int8u ontime){
	while(nblink--){
		ledon();
 18a:	c2 9a       	sbi	0x18, 2	; 24
		dlyms(ontime);
 18c:	c8 01       	movw	r24, r16
 18e:	e0 df       	rcall	.-64     	; 0x150 <dlyms>
		ledoff();
 190:	c2 98       	cbi	0x18, 2	; 24
		dlyms(100);
 192:	84 e6       	ldi	r24, 0x64	; 100
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	dc df       	rcall	.-72     	; 0x150 <dlyms>
 198:	c1 50       	subi	r28, 0x01	; 1
	LED_DDR 		|= _BV(LED_PIN);
	LED_PORT 		&= ~_BV(LED_PIN);
}

void blink(int8u nblink, int8u ontime){
	while(nblink--){
 19a:	b9 f7       	brne	.-18     	; 0x18a <blink+0x10>
		ledon();
		dlyms(ontime);
		ledoff();
		dlyms(100);
	}
}
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <LightInit>:
#include "light.h"

void LightInit(void) {
	LIGHT_DDR 	|= _BV(LIGHT_PIN);
 1a4:	bf 9a       	sbi	0x17, 7	; 23
	LIGHT_PORT 	&= ~_BV(LIGHT_PIN);
 1a6:	c7 98       	cbi	0x18, 7	; 24
 1a8:	08 95       	ret

000001aa <LightOn>:
}
void LightOn(void) {
	LIGHT_PORT |= _BV(LIGHT_PIN);
 1aa:	c7 9a       	sbi	0x18, 7	; 24
 1ac:	08 95       	ret

000001ae <LightOff>:
}
void LightOff(void) {
	LIGHT_PORT &= ~_BV(LIGHT_PIN);
 1ae:	c7 98       	cbi	0x18, 7	; 24
 1b0:	08 95       	ret

000001b2 <RFRxInit>:
#include "rf.h"

#ifdef RF_RECEIVER_ENABLE
	void RFRxInit(void) {
		RFDDR &= 0x0F;
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	81 bb       	out	0x11, r24	; 17
		RFPORT |= 0xF0;
 1b8:	82 b3       	in	r24, 0x12	; 18
 1ba:	80 6f       	ori	r24, 0xF0	; 240
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
