
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f16  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00000f16  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800208  00800208  00001172  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001173  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001e31  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000be3  00000000  00000000  0000327d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009b5  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000618  00000000  00000000  00004818  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000489  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015f5  00000000  00000000  000052b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  000068ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 30       	cpi	r26, 0x08	; 8
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a8 e0       	ldi	r26, 0x08	; 8
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 30       	cpi	r26, 0x0C	; 12
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DispMode>:
	lcdclr();
	lcdws("  SMART GloveS");
	DispMode();
}
static void DispMode(void) {
	lcdptr = 0xc1;
  92:	81 ec       	ldi	r24, 0xC1	; 193
  94:	80 93 0b 02 	sts	0x020B, r24
	if (mode == VOICE) lcdws("VOICE PLAYBACK");
  98:	80 91 70 00 	lds	r24, 0x0070
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	29 f4       	brne	.+10     	; 0xaa <DispMode+0x18>
  a0:	8e e9       	ldi	r24, 0x9E	; 158
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
  a8:	08 95       	ret
	else lcdws("DEVICE CONTROL");
  aa:	8d ea       	ldi	r24, 0xAD	; 173
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
  b2:	08 95       	ret

000000b4 <main>:
		sleep_cpu();
	}
	return 0;
}
static void init(void) {
	buzinit();
  b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <buzinit>
	APRinit();
  b8:	0e 94 3c 01 	call	0x278	; 0x278 <APRinit>
	RFTxInit();
  bc:	0e 94 43 04 	call	0x886	; 0x886 <RFTxInit>
	beep(2,100);
  c0:	64 e6       	ldi	r22, 0x64	; 100
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
	lcdinit();
  ca:	0e 94 b7 03 	call	0x76e	; 0x76e <lcdinit>
	swinit();
  ce:	0e 94 62 04 	call	0x8c4	; 0x8c4 <swinit>
	ledinit();
  d2:	0e 94 40 04 	call	0x880	; 0x880 <ledinit>
	lcdptr = 0xc1;
	if (mode == VOICE) lcdws("VOICE PLAYBACK");
	else lcdws("DEVICE CONTROL");
}
static void tmr1init(void) {
	TCNT1H   = 225;					/* overflows at every 250msec */
  d6:	81 ee       	ldi	r24, 0xE1	; 225
  d8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L   = 123;
  da:	8b e7       	ldi	r24, 0x7B	; 123
  dc:	8c bd       	out	0x2c, r24	; 44
	TIMSK   |= _BV(TOIE1);			//ENABLE OVERFLOW INTERRUPT
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	89 bf       	out	0x39, r24	; 57
	TCCR1A   = 0x00;					
  e4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B  |= _BV(CS12);			 /* PRESCALAR BY 256 */
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8e bd       	out	0x2e, r24	; 46
	beep(2,100);
	lcdinit();
	swinit();
	ledinit();
	tmr1init();
	if (SwPress())
  ec:	82 99       	sbic	0x10, 2	; 16
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x42>
		CalibGlove();
  f0:	0e 94 48 02 	call	0x490	; 0x490 <CalibGlove>
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x46>
	else
		ReadFlexSym();
  f6:	0e 94 16 02 	call	0x42c	; 0x42c <ReadFlexSym>
				case CTRL:	RFTx(Sym+1); break;
			}
	}
}
static void disptitl(void) { 
	lcdclr();
  fa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
	lcdws("  SMART GloveS");
  fe:	8c eb       	ldi	r24, 0xBC	; 188
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
	DispMode();
 106:	0e 94 49 00 	call	0x92	; 0x92 <DispMode>
	if (SwPress())
		CalibGlove();
	else
		ReadFlexSym();
	disptitl();
	sei();
 10a:	78 94       	sei
	sleep_enable();
 10c:	85 b7       	in	r24, 0x35	; 53
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
 112:	88 95       	sleep
							"Critical, need expeditious help!",
							"I need to go the restroom!"  } ;
int main(void) {
	init();
	while (TRUE) {
		if (Flag.ChkSym) {
 114:	80 91 0a 02 	lds	r24, 0x020A
 118:	81 ff       	sbrs	r24, 1
 11a:	45 c0       	rjmp	.+138    	; 0x1a6 <main+0xf2>
	sleep_enable();
	sleep_cpu();
}
static void ProcessSymb(void) {
	int8u Sym;
	if (Sym = CheckSym()) {
 11c:	0e 94 86 01 	call	0x30c	; 0x30c <CheckSym>
 120:	c8 2f       	mov	r28, r24
 122:	88 23       	and	r24, r24
 124:	d9 f1       	breq	.+118    	; 0x19c <main+0xe8>
		beep(1,ALRT_DLY);
 126:	6a ef       	ldi	r22, 0xFA	; 250
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
		Sym--;
 130:	df ef       	ldi	r29, 0xFF	; 255
 132:	dc 0f       	add	r29, r28
		if (Sym == CONTROL_SIGN) {
 134:	d8 30       	cpi	r29, 0x08	; 8
 136:	99 f4       	brne	.+38     	; 0x15e <main+0xaa>
			if (mode == VOICE)
 138:	80 91 70 00 	lds	r24, 0x0070
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	21 f4       	brne	.+8      	; 0x148 <main+0x94>
				mode = CTRL;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 70 00 	sts	0x0070, r24
 146:	03 c0       	rjmp	.+6      	; 0x14e <main+0x9a>
			else
				mode = VOICE;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 70 00 	sts	0x0070, r24
			DispMode();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <DispMode>
			beep(2,250);
 152:	6a ef       	ldi	r22, 0xFA	; 250
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
 15c:	1f c0       	rjmp	.+62     	; 0x19c <main+0xe8>
		} else
			switch (mode) {
 15e:	80 91 70 00 	lds	r24, 0x0070
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	19 f0       	breq	.+6      	; 0x16c <main+0xb8>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	b1 f0       	breq	.+44     	; 0x196 <main+0xe2>
 16a:	18 c0       	rjmp	.+48     	; 0x19c <main+0xe8>
				case VOICE: lcdclr();
 16c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
							lcdws(TextMsg[Sym]);
 170:	cd 2f       	mov	r28, r29
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	fe 01       	movw	r30, r28
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
							APRVoice(Sym);
 186:	ce 01       	movw	r24, r28
 188:	0e 94 41 01 	call	0x282	; 0x282 <APRVoice>
							lcdclr(); DispMode(); break;
 18c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
 190:	0e 94 49 00 	call	0x92	; 0x92 <DispMode>
 194:	03 c0       	rjmp	.+6      	; 0x19c <main+0xe8>
				case CTRL:	RFTx(Sym+1); break;
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 4c 04 	call	0x898	; 0x898 <RFTx>
int main(void) {
	init();
	while (TRUE) {
		if (Flag.ChkSym) {
			ProcessSymb();
			Flag.ChkSym = FALSE;
 19c:	80 91 0a 02 	lds	r24, 0x020A
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	80 93 0a 02 	sts	0x020A, r24
		}
		sleep_cpu();
 1a6:	88 95       	sleep
	}
 1a8:	b5 cf       	rjmp	.-150    	; 0x114 <main+0x60>

000001aa <__vector_9>:
	TCNT1L   = 123;
	TIMSK   |= _BV(TOIE1);			//ENABLE OVERFLOW INTERRUPT
	TCCR1A   = 0x00;					
	TCCR1B  |= _BV(CS12);			 /* PRESCALAR BY 256 */
}
ISR(TIMER1_OVF_vect)  { 
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	static int8u i,j;
	TCNT1H   = 225;					/* overflows at every 250msec */
 1b6:	81 ee       	ldi	r24, 0xE1	; 225
 1b8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L   = 123;
 1ba:	8b e7       	ldi	r24, 0x7B	; 123
 1bc:	8c bd       	out	0x2c, r24	; 44
	
	if (++i >= 40) i = 0;
 1be:	80 91 09 02 	lds	r24, 0x0209
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 09 02 	sts	0x0209, r24
 1c8:	88 32       	cpi	r24, 0x28	; 40
 1ca:	18 f0       	brcs	.+6      	; 0x1d2 <__vector_9+0x28>
 1cc:	10 92 09 02 	sts	0x0209, r1
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <__vector_9+0x38>
	switch(i) {
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <__vector_9+0x3c>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <__vector_9+0x38>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	19 f0       	breq	.+6      	; 0x1e2 <__vector_9+0x38>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_9+0x3e>
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_9+0x3c>
		case 0: case 2: ledon();  break;
 1e2:	a8 9a       	sbi	0x15, 0	; 21
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_9+0x3e>
		case 1: case 3: ledoff(); break;
 1e6:	a8 98       	cbi	0x15, 0	; 21
	} 
	if (!Flag.ChkSym && ++j >= 2) {
 1e8:	80 91 0a 02 	lds	r24, 0x020A
 1ec:	81 fd       	sbrc	r24, 1
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <__vector_9+0x64>
 1f0:	80 91 08 02 	lds	r24, 0x0208
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	18 f4       	brcc	.+6      	; 0x200 <__vector_9+0x56>
 1fa:	80 93 08 02 	sts	0x0208, r24
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <__vector_9+0x64>
		j = 0;
 200:	10 92 08 02 	sts	0x0208, r1
		Flag.ChkSym = TRUE;
 204:	80 91 0a 02 	lds	r24, 0x020A
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	80 93 0a 02 	sts	0x020A, r24
	}
}
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <adcinit>:
#include "adc.h"

void adcinit(void) {
	ADMUX = 0x00;							//CHANNEL 0 MUX3...0 = 000
 21a:	17 b8       	out	0x07, r1	; 7
	ADMUX |= _BV(REFS0);					//5V Avcc INTERNAL REFERENCE WITH EXTERNAL CAPACITOR
 21c:	3e 9a       	sbi	0x07, 6	; 7

	#ifdef REF_VOL_256
		ADMUX |= _BV(REFS1);
 21e:	3f 9a       	sbi	0x07, 7	; 7
	#endif
	
	ADMUX &= ~_BV(ADLAR);					//ADC RIGHT ADJUST RESULT
 220:	3d 98       	cbi	0x07, 5	; 7
	ADCSRA = 0x00;
 222:	16 b8       	out	0x06, r1	; 6
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN);	//PRESCALAR BY 128 GIVES 115KHz WITH 7.3728MHz Fcpu
 224:	86 b1       	in	r24, 0x06	; 6
 226:	86 68       	ori	r24, 0x86	; 134
 228:	86 b9       	out	0x06, r24	; 6
 22a:	08 95       	ret

0000022c <adcget>:

}
int16u adcget(int8u ChNum) {
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
	 int16u adcval = 0;
	 int8u i, MSB, LSB;

	adcinit();	
 230:	0e 94 0d 01 	call	0x21a	; 0x21a <adcinit>
	ADMUX = (ADMUX & 0xe0) | ChNum;
 234:	97 b1       	in	r25, 0x07	; 7
 236:	90 7e       	andi	r25, 0xE0	; 224
 238:	8c 2f       	mov	r24, r28
 23a:	89 2b       	or	r24, r25
 23c:	87 b9       	out	0x07, r24	; 7
 23e:	90 e2       	ldi	r25, 0x20	; 32
	ADCSRA = 0x00;
	ADCSRA |= _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN);	//PRESCALAR BY 128 GIVES 115KHz WITH 7.3728MHz Fcpu

}
int16u adcget(int8u ChNum) {
	 int16u adcval = 0;
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0

	adcinit();	
	ADMUX = (ADMUX & 0xe0) | ChNum;
	
	for (i = 0; i < AVERAGEVALUE; i++)	{
		ADCSRA |= _BV(ADSC);					//START CONVERSION
 244:	36 9a       	sbi	0x06, 6	; 6
		while (!(ADCSRA & _BV(ADIF))); 		//WAIT FOR CONVERSION TO COMPLETE
 246:	34 9b       	sbis	0x06, 4	; 6
 248:	fe cf       	rjmp	.-4      	; 0x246 <adcget+0x1a>
		adcval +=  ADCL + (ADCH * 256);
 24a:	84 b1       	in	r24, 0x04	; 4
 24c:	25 b1       	in	r18, 0x05	; 5
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	32 2f       	mov	r19, r18
 252:	22 27       	eor	r18, r18
 254:	28 0f       	add	r18, r24
 256:	31 1d       	adc	r19, r1
 258:	42 0f       	add	r20, r18
 25a:	53 1f       	adc	r21, r19
		ADCSRA |= _BV(ADIF);					//CLEAR FLAG BY WRITING 1 TO THE FLAG BIT
 25c:	34 9a       	sbi	0x06, 4	; 6
 25e:	91 50       	subi	r25, 0x01	; 1
	 int8u i, MSB, LSB;

	adcinit();	
	ADMUX = (ADMUX & 0xe0) | ChNum;
	
	for (i = 0; i < AVERAGEVALUE; i++)	{
 260:	89 f7       	brne	.-30     	; 0x244 <adcget+0x18>

	adcval >>= 5;
			
	return adcval;
	
}
 262:	ca 01       	movw	r24, r20
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	92 95       	swap	r25
 26a:	82 95       	swap	r24
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	89 27       	eor	r24, r25
 270:	9f 70       	andi	r25, 0x0F	; 15
 272:	89 27       	eor	r24, r25
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <APRinit>:
#include "apr.h"

void APRinit(void){
	APR_DDR	= 0xFF;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	87 bb       	out	0x17, r24	; 23
	APR_PORT |= 0xFF;
 27c:	98 b3       	in	r25, 0x18	; 24
 27e:	88 bb       	out	0x18, r24	; 24
 280:	08 95       	ret

00000282 <APRVoice>:
}
void APRVoice(int8u ch){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
	APR_PORT &= ~_BV(ch);
 286:	98 b3       	in	r25, 0x18	; 24
 288:	c1 e0       	ldi	r28, 0x01	; 1
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <APRVoice+0x10>
 28e:	cc 0f       	add	r28, r28
 290:	dd 1f       	adc	r29, r29
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <APRVoice+0xc>
 296:	8c 2f       	mov	r24, r28
 298:	80 95       	com	r24
 29a:	98 23       	and	r25, r24
 29c:	98 bb       	out	0x18, r25	; 24
	dlyms(100);
 29e:	84 e6       	ldi	r24, 0x64	; 100
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	APR_PORT |= _BV(ch);
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	c8 2b       	or	r28, r24
 2aa:	c8 bb       	out	0x18, r28	; 24
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <buzinit>:
#include "buz.h"

extern int16u BeepOffDly;

void buzinit(void) {
	BUZ_DDR		|= _BV(BUZ_PIN);
 2b2:	a1 9a       	sbi	0x14, 1	; 20
	BUZ_PORT 	&= ~_BV(BUZ_PIN);
 2b4:	a9 98       	cbi	0x15, 1	; 21
 2b6:	08 95       	ret

000002b8 <beep>:
}

void beep(int8u nbeep, int16u ontime) {
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
	while(nbeep--)	{
 2be:	88 23       	and	r24, r24
 2c0:	69 f0       	breq	.+26     	; 0x2dc <beep+0x24>
 2c2:	8b 01       	movw	r16, r22
 2c4:	c8 2f       	mov	r28, r24
		buzon();
 2c6:	a9 9a       	sbi	0x15, 1	; 21
		dlyms(ontime);
 2c8:	c8 01       	movw	r24, r16
 2ca:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
		buzoff();
 2ce:	a9 98       	cbi	0x15, 1	; 21
		dlyms(100/*BeepOffDly*/);
 2d0:	84 e6       	ldi	r24, 0x64	; 100
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
 2d8:	c1 50       	subi	r28, 0x01	; 1
	BUZ_DDR		|= _BV(BUZ_PIN);
	BUZ_PORT 	&= ~_BV(BUZ_PIN);
}

void beep(int8u nbeep, int16u ontime) {
	while(nbeep--)	{
 2da:	a9 f7       	brne	.-22     	; 0x2c6 <beep+0xe>
		buzon();
		dlyms(ontime);
		buzoff();
		dlyms(100/*BeepOffDly*/);
	}
}
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <dlyms>:
 *  Author: bsp
 */ 
#include "dly.h"

void dlyms(int16u dly) {
	while (dly--)
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	41 f0       	breq	.+16     	; 0x2f8 <dlyms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	ef ec       	ldi	r30, 0xCF	; 207
 2ea:	f7 e0       	ldi	r31, 0x07	; 7
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <dlyms+0x8>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <dlyms+0xe>
 2f2:	00 00       	nop
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	c1 f7       	brne	.-16     	; 0x2e8 <dlyms+0x4>
 2f8:	08 95       	ret

000002fa <dlyus>:
		_delay_ms(1);
}

void dlyus(int16u dly) {
	while (dly--)
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	31 f0       	breq	.+12     	; 0x30a <dlyus+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	22 e0       	ldi	r18, 0x02	; 2
 300:	2a 95       	dec	r18
 302:	f1 f7       	brne	.-4      	; 0x300 <dlyus+0x6>
 304:	00 c0       	rjmp	.+0      	; 0x306 <dlyus+0xc>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	d1 f7       	brne	.-12     	; 0x2fe <dlyus+0x4>
 30a:	08 95       	ret

0000030c <CheckSym>:
				};
				
void FlexSensInit(void) {
		adcinit();
}
int8u CheckSym(void) {
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	2f 97       	sbiw	r28, 0x0f	; 15
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	7e 01       	movw	r14, r28
 32e:	8b e0       	ldi	r24, 0x0B	; 11
 330:	e8 0e       	add	r14, r24
 332:	f1 1c       	adc	r15, r1
 334:	01 e8       	ldi	r16, 0x81	; 129
	int8u i,j;
	char TempStr[10];
	int8u FlexVal[5];
	
	for (i = 0; i < 5; i++) {
 336:	10 e0       	ldi	r17, 0x00	; 0
		FlexVal[i] = adcget(i) / 11;
 338:	81 2f       	mov	r24, r17
 33a:	0e 94 16 01 	call	0x22c	; 0x22c <adcget>
 33e:	9c 01       	movw	r18, r24
 340:	af e2       	ldi	r26, 0x2F	; 47
 342:	ba eb       	ldi	r27, 0xBA	; 186
 344:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	f7 01       	movw	r30, r14
 356:	81 93       	st	Z+, r24
 358:	7f 01       	movw	r14, r30
		itoa(FlexVal[i], TempStr);
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 04 04 	call	0x808	; 0x808 <itoa>
		lcdptr = 0x81 + (i * 3);
 366:	00 93 0b 02 	sts	0x020B, r16
		lcdws("   ");
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
		lcdptr = 0x81 + (i * 3);
 372:	00 93 0b 02 	sts	0x020B, r16
		lcdws(TempStr);
 376:	ce 01       	movw	r24, r28
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
int8u CheckSym(void) {
	int8u i,j;
	char TempStr[10];
	int8u FlexVal[5];
	
	for (i = 0; i < 5; i++) {
 37e:	1f 5f       	subi	r17, 0xFF	; 255
 380:	0d 5f       	subi	r16, 0xFD	; 253
 382:	15 30       	cpi	r17, 0x05	; 5
 384:	c9 f6       	brne	.-78     	; 0x338 <CheckSym+0x2c>
		lcdws(TempStr);
	}
	for (j = 0; j < MAX_SYMBOL; j++) {
		Flag.Sym = TRUE;
		for (i = 0; i < 5; i++) {
			if ((FlexVal[i] < (SYM[j][i] + DELTA)) && (FlexVal[i] > (SYM[j][i] - DELTA)))
 386:	eb 84       	ldd	r14, Y+11	; 0x0b
 388:	f1 2c       	mov	r15, r1
 38a:	61 e7       	ldi	r22, 0x71	; 113
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	8e 01       	movw	r16, r28
 392:	00 5f       	subi	r16, 0xF0	; 240
 394:	1f 4f       	sbci	r17, 0xFF	; 255
		lcdws("   ");
		lcdptr = 0x81 + (i * 3);
		lcdws(TempStr);
	}
	for (j = 0; j < MAX_SYMBOL; j++) {
		Flag.Sym = TRUE;
 396:	90 91 0a 02 	lds	r25, 0x020A
 39a:	91 60       	ori	r25, 0x01	; 1
 39c:	90 93 0a 02 	sts	0x020A, r25
		for (i = 0; i < 5; i++) {
			if ((FlexVal[i] < (SYM[j][i] + DELTA)) && (FlexVal[i] > (SYM[j][i] - DELTA)))
 3a0:	fb 01       	movw	r30, r22
 3a2:	20 81       	ld	r18, Z
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	a9 01       	movw	r20, r18
 3a8:	4b 5f       	subi	r20, 0xFB	; 251
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	e4 16       	cp	r14, r20
 3ae:	f5 06       	cpc	r15, r21
 3b0:	cc f4       	brge	.+50     	; 0x3e4 <CheckSym+0xd8>
 3b2:	25 50       	subi	r18, 0x05	; 5
 3b4:	31 09       	sbc	r19, r1
 3b6:	2e 15       	cp	r18, r14
 3b8:	3f 05       	cpc	r19, r15
 3ba:	a4 f4       	brge	.+40     	; 0x3e4 <CheckSym+0xd8>
 3bc:	fe 01       	movw	r30, r28
 3be:	3c 96       	adiw	r30, 0x0c	; 12
 3c0:	db 01       	movw	r26, r22
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	41 91       	ld	r20, Z+
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	2d 91       	ld	r18, X+
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	69 01       	movw	r12, r18
 3ce:	95 e0       	ldi	r25, 0x05	; 5
 3d0:	c9 0e       	add	r12, r25
 3d2:	d1 1c       	adc	r13, r1
 3d4:	4c 15       	cp	r20, r12
 3d6:	5d 05       	cpc	r21, r13
 3d8:	2c f4       	brge	.+10     	; 0x3e4 <CheckSym+0xd8>
 3da:	25 50       	subi	r18, 0x05	; 5
 3dc:	31 09       	sbc	r19, r1
 3de:	24 17       	cp	r18, r20
 3e0:	35 07       	cpc	r19, r21
 3e2:	34 f0       	brlt	.+12     	; 0x3f0 <CheckSym+0xe4>
				;
			else {
				Flag.Sym = FALSE;
 3e4:	90 91 0a 02 	lds	r25, 0x020A
 3e8:	9e 7f       	andi	r25, 0xFE	; 254
 3ea:	90 93 0a 02 	sts	0x020A, r25
				break;
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <CheckSym+0xea>
		lcdptr = 0x81 + (i * 3);
		lcdws(TempStr);
	}
	for (j = 0; j < MAX_SYMBOL; j++) {
		Flag.Sym = TRUE;
		for (i = 0; i < 5; i++) {
 3f0:	e0 17       	cp	r30, r16
 3f2:	f1 07       	cpc	r31, r17
 3f4:	39 f7       	brne	.-50     	; 0x3c4 <CheckSym+0xb8>
			else {
				Flag.Sym = FALSE;
				break;
			}
		}
		if (Flag.Sym) 
 3f6:	90 91 0a 02 	lds	r25, 0x020A
 3fa:	90 ff       	sbrs	r25, 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <CheckSym+0xf6>
			return j+1;
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	06 c0       	rjmp	.+12     	; 0x40e <CheckSym+0x102>
		lcdptr = 0x81 + (i * 3);
		lcdws("   ");
		lcdptr = 0x81 + (i * 3);
		lcdws(TempStr);
	}
	for (j = 0; j < MAX_SYMBOL; j++) {
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	6b 5f       	subi	r22, 0xFB	; 251
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	89 30       	cpi	r24, 0x09	; 9
 40a:	29 f6       	brne	.-118    	; 0x396 <CheckSym+0x8a>
			}
		}
		if (Flag.Sym) 
			return j+1;
	}
	return 0;
 40c:	80 e0       	ldi	r24, 0x00	; 0
}
 40e:	2f 96       	adiw	r28, 0x0f	; 15
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	08 95       	ret

0000042c <ReadFlexSym>:
	lcdws("  Calibrated!!");
	beep(3,75);
	dlyms(500);
	ReadFlexSym();
} 
void ReadFlexSym(void) {
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	0f 2e       	mov	r0, r31
 43e:	f1 e7       	ldi	r31, 0x71	; 113
 440:	cf 2e       	mov	r12, r31
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	df 2e       	mov	r13, r31
 446:	f0 2d       	mov	r31, r0
	int8u i, j;
	int8u *Addr = &SYMBOL_ADDR;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	12 c0       	rjmp	.+36     	; 0x472 <ReadFlexSym+0x46>
	
	for (j = 0; j < MAX_SYMBOL; j++)
		for (i = 0; i < 5; i++)
			SYM[j][i] = eeprom_read_byte (Addr++);
 44e:	8c 01       	movw	r16, r24
 450:	0f 5f       	subi	r16, 0xFF	; 255
 452:	1f 4f       	sbci	r17, 0xFF	; 255
 454:	0e 94 3d 07 	call	0xe7a	; 0xe7a <eeprom_read_byte>
 458:	89 93       	st	Y+, r24
 45a:	c8 01       	movw	r24, r16
void ReadFlexSym(void) {
	int8u i, j;
	int8u *Addr = &SYMBOL_ADDR;
	
	for (j = 0; j < MAX_SYMBOL; j++)
		for (i = 0; i < 5; i++)
 45c:	0e 15       	cp	r16, r14
 45e:	1f 05       	cpc	r17, r15
 460:	b1 f7       	brne	.-20     	; 0x44e <ReadFlexSym+0x22>
 462:	25 e0       	ldi	r18, 0x05	; 5
 464:	c2 0e       	add	r12, r18
 466:	d1 1c       	adc	r13, r1
 468:	c7 01       	movw	r24, r14
} 
void ReadFlexSym(void) {
	int8u i, j;
	int8u *Addr = &SYMBOL_ADDR;
	
	for (j = 0; j < MAX_SYMBOL; j++)
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	8d 32       	cpi	r24, 0x2D	; 45
 46e:	92 07       	cpc	r25, r18
 470:	31 f0       	breq	.+12     	; 0x47e <ReadFlexSym+0x52>
 472:	7c 01       	movw	r14, r24
 474:	25 e0       	ldi	r18, 0x05	; 5
 476:	e2 0e       	add	r14, r18
 478:	f1 1c       	adc	r15, r1
	lcdws("  Calibrated!!");
	beep(3,75);
	dlyms(500);
	ReadFlexSym();
} 
void ReadFlexSym(void) {
 47a:	e6 01       	movw	r28, r12
 47c:	e8 cf       	rjmp	.-48     	; 0x44e <ReadFlexSym+0x22>
	int8u *Addr = &SYMBOL_ADDR;
	
	for (j = 0; j < MAX_SYMBOL; j++)
		for (i = 0; i < 5; i++)
			SYM[j][i] = eeprom_read_byte (Addr++);
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	08 95       	ret

00000490 <CalibGlove>:
		if (Flag.Sym) 
			return j+1;
	}
	return 0;
}
void CalibGlove(void) {
 490:	2f 92       	push	r2
 492:	3f 92       	push	r3
 494:	4f 92       	push	r4
 496:	5f 92       	push	r5
 498:	6f 92       	push	r6
 49a:	7f 92       	push	r7
 49c:	8f 92       	push	r8
 49e:	9f 92       	push	r9
 4a0:	af 92       	push	r10
 4a2:	bf 92       	push	r11
 4a4:	cf 92       	push	r12
 4a6:	df 92       	push	r13
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	a8 97       	sbiw	r28, 0x28	; 40
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
	int8u i, j, FlexVal[5];
	int8u *Addr = &SYMBOL_ADDR;
	char TempStr[10], Text[20];
	
	lcdclr();
 4c4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
	lcdws("Calibrat'g Glove");
 4c8:	8a eb       	ldi	r24, 0xBA	; 186
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
	beep(1,75);
 4d0:	6b e4       	ldi	r22, 0x4B	; 75
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
	dlyms(500);
 4da:	84 ef       	ldi	r24, 0xF4	; 244
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	while (SwPress());
 4e2:	82 9b       	sbis	0x10, 2	; 16
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <CalibGlove+0x52>
 4e6:	88 24       	eor	r8, r8
 4e8:	83 94       	inc	r8
 4ea:	91 2c       	mov	r9, r1
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	98 a7       	std	Y+40, r25	; 0x28
 4f2:	8f a3       	std	Y+39, r24	; 0x27
 4f4:	de 01       	movw	r26, r28
 4f6:	11 96       	adiw	r26, 0x01	; 1
 4f8:	6d 01       	movw	r12, r26
		
	for (j = 0; j < MAX_SYMBOL; j++) {
		while (TRUE) {
			for (i = 0; i < 5; i++) {
				FlexVal[i] = adcget(i) / 11;
				itoa(FlexVal[i], TempStr);
 4fa:	5e 01       	movw	r10, r28
 4fc:	b6 e0       	ldi	r27, 0x06	; 6
 4fe:	ab 0e       	add	r10, r27
 500:	b1 1c       	adc	r11, r1
 502:	4c 2c       	mov	r4, r12
 504:	de a2       	std	Y+38, r13	; 0x26
	dlyms(500);
	while (SwPress());
		
	for (j = 0; j < MAX_SYMBOL; j++) {
		while (TRUE) {
			for (i = 0; i < 5; i++) {
 506:	51 2c       	mov	r5, r1
				FlexVal[i] = adcget(i) / 11;
				itoa(FlexVal[i], TempStr);
 508:	6a 2c       	mov	r6, r10
 50a:	7b 2c       	mov	r7, r11
				lcdws(TempStr);
			}
			if (SwPress()) {
				beep(1,150);
				lcdr2();
				sprintf(Text, "Storing %d SYMBOL", j+1);
 50c:	fe 01       	movw	r30, r28
 50e:	70 96       	adiw	r30, 0x10	; 16
 510:	fd a3       	std	Y+37, r31	; 0x25
 512:	ec a3       	std	Y+36, r30	; 0x24
 514:	76 01       	movw	r14, r12
 516:	04 2d       	mov	r16, r4
 518:	1e a1       	ldd	r17, Y+38	; 0x26
 51a:	0f 2e       	mov	r0, r31
 51c:	f1 e8       	ldi	r31, 0x81	; 129
 51e:	2f 2e       	mov	r2, r31
 520:	f0 2d       	mov	r31, r0
	dlyms(500);
	while (SwPress());
		
	for (j = 0; j < MAX_SYMBOL; j++) {
		while (TRUE) {
			for (i = 0; i < 5; i++) {
 522:	35 2c       	mov	r3, r5
				FlexVal[i] = adcget(i) / 11;
 524:	83 2d       	mov	r24, r3
 526:	0e 94 16 01 	call	0x22c	; 0x22c <adcget>
 52a:	9c 01       	movw	r18, r24
 52c:	af e2       	ldi	r26, 0x2F	; 47
 52e:	ba eb       	ldi	r27, 0xBA	; 186
 530:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__umulhisi3>
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	d8 01       	movw	r26, r16
 542:	8d 93       	st	X+, r24
 544:	8d 01       	movw	r16, r26
				itoa(FlexVal[i], TempStr);
 546:	66 2d       	mov	r22, r6
 548:	77 2d       	mov	r23, r7
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 04 04 	call	0x808	; 0x808 <itoa>
				lcdptr = 0x81 + (i * 3);
 550:	20 92 0b 02 	sts	0x020B, r2
				lcdws("   ");
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
				lcdptr = 0x81 + (i * 3);
 55c:	20 92 0b 02 	sts	0x020B, r2
				lcdws(TempStr);
 560:	86 2d       	mov	r24, r6
 562:	97 2d       	mov	r25, r7
 564:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
	dlyms(500);
	while (SwPress());
		
	for (j = 0; j < MAX_SYMBOL; j++) {
		while (TRUE) {
			for (i = 0; i < 5; i++) {
 568:	33 94       	inc	r3
 56a:	b3 e0       	ldi	r27, 0x03	; 3
 56c:	2b 0e       	add	r2, r27
 56e:	e5 e0       	ldi	r30, 0x05	; 5
 570:	3e 12       	cpse	r3, r30
 572:	d8 cf       	rjmp	.-80     	; 0x524 <CalibGlove+0x94>
				lcdptr = 0x81 + (i * 3);
				lcdws("   ");
				lcdptr = 0x81 + (i * 3);
				lcdws(TempStr);
			}
			if (SwPress()) {
 574:	82 99       	sbic	0x10, 2	; 16
 576:	ce cf       	rjmp	.-100    	; 0x514 <CalibGlove+0x84>
				beep(1,150);
 578:	66 e9       	ldi	r22, 0x96	; 150
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
				lcdr2();
 582:	0e 94 83 03 	call	0x706	; 0x706 <lcdr2>
				sprintf(Text, "Storing %d SYMBOL", j+1);
 586:	9f 92       	push	r9
 588:	8f 92       	push	r8
 58a:	ab ec       	ldi	r26, 0xCB	; 203
 58c:	b1 e0       	ldi	r27, 0x01	; 1
 58e:	bf 93       	push	r27
 590:	af 93       	push	r26
 592:	fd a1       	ldd	r31, Y+37	; 0x25
 594:	ff 93       	push	r31
 596:	8c a1       	ldd	r24, Y+36	; 0x24
 598:	8f 93       	push	r24
 59a:	0e 94 9c 04 	call	0x938	; 0x938 <sprintf>
				lcdws(Text);
 59e:	ce 01       	movw	r24, r28
 5a0:	40 96       	adiw	r24, 0x10	; 16
 5a2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	8f a1       	ldd	r24, Y+39	; 0x27
 5b4:	98 a5       	ldd	r25, Y+40	; 0x28
				for (i = 0; i < 5; i++) {
					eeprom_write_byte(Addr++, FlexVal[i]);
 5b6:	8c 01       	movw	r16, r24
 5b8:	0f 5f       	subi	r16, 0xFF	; 255
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	d7 01       	movw	r26, r14
 5be:	6c 91       	ld	r22, X
 5c0:	0e 94 45 07 	call	0xe8a	; 0xe8a <eeprom_write_byte>
					FlexVal[i] = 0;
 5c4:	f7 01       	movw	r30, r14
 5c6:	11 92       	st	Z+, r1
 5c8:	7f 01       	movw	r14, r30
					dlyms(10);
 5ca:	8a e0       	ldi	r24, 0x0A	; 10
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
				beep(1,150);
				lcdr2();
				sprintf(Text, "Storing %d SYMBOL", j+1);
				lcdws(Text);
				for (i = 0; i < 5; i++) {
					eeprom_write_byte(Addr++, FlexVal[i]);
 5d2:	c8 01       	movw	r24, r16
			if (SwPress()) {
				beep(1,150);
				lcdr2();
				sprintf(Text, "Storing %d SYMBOL", j+1);
				lcdws(Text);
				for (i = 0; i < 5; i++) {
 5d4:	ea 14       	cp	r14, r10
 5d6:	fb 04       	cpc	r15, r11
 5d8:	71 f7       	brne	.-36     	; 0x5b6 <CalibGlove+0x126>
 5da:	8f a1       	ldd	r24, Y+39	; 0x27
 5dc:	98 a5       	ldd	r25, Y+40	; 0x28
 5de:	05 96       	adiw	r24, 0x05	; 5
 5e0:	98 a7       	std	Y+40, r25	; 0x28
 5e2:	8f a3       	std	Y+39, r24	; 0x27
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	89 1a       	sub	r8, r25
 5e8:	99 0a       	sbc	r9, r25
	lcdws("Calibrat'g Glove");
	beep(1,75);
	dlyms(500);
	while (SwPress());
		
	for (j = 0; j < MAX_SYMBOL; j++) {
 5ea:	aa e0       	ldi	r26, 0x0A	; 10
 5ec:	8a 16       	cp	r8, r26
 5ee:	91 04       	cpc	r9, r1
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <CalibGlove+0x164>
 5f2:	90 cf       	rjmp	.-224    	; 0x514 <CalibGlove+0x84>
				}
				break;
			}
		}
	}
	dlyms(500);
 5f4:	84 ef       	ldi	r24, 0xF4	; 244
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	lcdclr();
 5fc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
	lcdws("  Calibrated!!");
 600:	8d ed       	ldi	r24, 0xDD	; 221
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
	beep(3,75);
 608:	6b e4       	ldi	r22, 0x4B	; 75
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <beep>
	dlyms(500);
 612:	84 ef       	ldi	r24, 0xF4	; 244
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	ReadFlexSym();
 61a:	0e 94 16 02 	call	0x42c	; 0x42c <ReadFlexSym>
} 
 61e:	a8 96       	adiw	r28, 0x28	; 40
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	bf 90       	pop	r11
 63c:	af 90       	pop	r10
 63e:	9f 90       	pop	r9
 640:	8f 90       	pop	r8
 642:	7f 90       	pop	r7
 644:	6f 90       	pop	r6
 646:	5f 90       	pop	r5
 648:	4f 90       	pop	r4
 64a:	3f 90       	pop	r3
 64c:	2f 90       	pop	r2
 64e:	08 95       	ret

00000650 <LCDEnable>:
static void  LCDWriteByte	(char  ch);

int8u lcdptr;

static void  LCDEnable(void){
    LCD_DATA_PORT &= ~ (_BV(LCD_EN)); 
 650:	ab 98       	cbi	0x15, 3	; 21
    dlyus(1);
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 7d 01 	call	0x2fa	; 0x2fa <dlyus>
    LCD_DATA_PORT |=  _BV(LCD_EN);  
 65a:	ab 9a       	sbi	0x15, 3	; 21
 65c:	08 95       	ret

0000065e <LCDWriteByte>:
			adr++;					// increment display aadress
		}
	} 
}

static void  LCDWriteByte(char  LCDData){
 65e:	cf 93       	push	r28
 660:	c8 2f       	mov	r28, r24
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|(LCDData & 0xF0);
 662:	85 b3       	in	r24, 0x15	; 21
 664:	9c 2f       	mov	r25, r28
 666:	90 7f       	andi	r25, 0xF0	; 240
 668:	8f 70       	andi	r24, 0x0F	; 15
 66a:	89 2b       	or	r24, r25
 66c:	85 bb       	out	0x15, r24	; 21
    LCDEnable();
 66e:	0e 94 28 03 	call	0x650	; 0x650 <LCDEnable>
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|((LCDData << 4) & 0xF0);
 672:	25 b3       	in	r18, 0x15	; 21
 674:	30 e1       	ldi	r19, 0x10	; 16
 676:	c3 9f       	mul	r28, r19
 678:	c0 01       	movw	r24, r0
 67a:	11 24       	eor	r1, r1
 67c:	92 2f       	mov	r25, r18
 67e:	9f 70       	andi	r25, 0x0F	; 15
 680:	89 2b       	or	r24, r25
 682:	85 bb       	out	0x15, r24	; 21
    LCDEnable();
 684:	0e 94 28 03 	call	0x650	; 0x650 <LCDEnable>
    dlyms(2);
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
}
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <lcdwc>:
    LCD_DATA_PORT &= ~ (_BV(LCD_EN)); 
    dlyus(1);
    LCD_DATA_PORT |=  _BV(LCD_EN);  
}
void lcdwc(int8u x){
    LCD_DATA_PORT &= ~ (_BV(LCD_RS)); 
 694:	aa 98       	cbi	0x15, 2	; 21
    LCDWriteByte(x);
 696:	0e 94 2f 03 	call	0x65e	; 0x65e <LCDWriteByte>
 69a:	08 95       	ret

0000069c <lcdwd>:
}
void lcdwd(char ch){
    LCD_DATA_PORT |=  _BV(LCD_RS);
 69c:	aa 9a       	sbi	0x15, 2	; 21
    LCDWriteByte(ch);
 69e:	0e 94 2f 03 	call	0x65e	; 0x65e <LCDWriteByte>
 6a2:	08 95       	ret

000006a4 <lcdws>:
}

void lcdws(char *s){
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
	while (*s) {
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 81       	ld	r18, Z
 6b0:	22 23       	and	r18, r18
 6b2:	e9 f0       	breq	.+58     	; 0x6ee <lcdws+0x4a>
 6b4:	ec 01       	movw	r28, r24
				break;
		}
		#else
			switch(lcdptr) {
				case 0x80+16:
				lcdptr = 0xC0;
 6b6:	00 ec       	ldi	r16, 0xC0	; 192
				break;
				case 0xC0+16:
				lcdptr = 0x80;
 6b8:	10 e8       	ldi	r17, 0x80	; 128
			case 0xD4+20:
				lcdptr = 0x80;
				break;
		}
		#else
			switch(lcdptr) {
 6ba:	80 91 0b 02 	lds	r24, 0x020B
 6be:	80 39       	cpi	r24, 0x90	; 144
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <lcdws+0x24>
 6c2:	80 3d       	cpi	r24, 0xD0	; 208
 6c4:	21 f0       	breq	.+8      	; 0x6ce <lcdws+0x2a>
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <lcdws+0x2e>
				case 0x80+16:
				lcdptr = 0xC0;
 6c8:	00 93 0b 02 	sts	0x020B, r16
				break;
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <lcdws+0x2e>
				case 0xC0+16:
				lcdptr = 0x80;
 6ce:	10 93 0b 02 	sts	0x020B, r17
				break;
			}
		#endif
		lcdwc(lcdptr++);
 6d2:	80 91 0b 02 	lds	r24, 0x020B
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	98 0f       	add	r25, r24
 6da:	90 93 0b 02 	sts	0x020B, r25
 6de:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
		lcdwd(*s++);
 6e2:	89 91       	ld	r24, Y+
 6e4:	0e 94 4e 03 	call	0x69c	; 0x69c <lcdwd>
    LCD_DATA_PORT |=  _BV(LCD_RS);
    LCDWriteByte(ch);
}

void lcdws(char *s){
	while (*s) {
 6e8:	88 81       	ld	r24, Y
 6ea:	81 11       	cpse	r24, r1
 6ec:	e6 cf       	rjmp	.-52     	; 0x6ba <lcdws+0x16>
			}
		#endif
		lcdwc(lcdptr++);
		lcdwd(*s++);
	}
}
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	08 95       	ret

000006f8 <lcdclr>:
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|((LCDData << 4) & 0xF0);
    LCDEnable();
    dlyms(2);
}
void lcdclr(void) {
	lcdwc(0x01);
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	lcdptr = 0x80;	  /* Clear display LCD */
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	80 93 0b 02 	sts	0x020B, r24
 704:	08 95       	ret

00000706 <lcdr2>:
 void lcdr1(void) {
	lcdwc(0x80); 	  /* Begin at Line 1 */
	lcdptr = 0x80;
 }
  void lcdr2(void) {
	lcdwc(0xc0); 	  /* Begin at Line 1 */
 706:	80 ec       	ldi	r24, 0xC0	; 192
 708:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	lcdptr = 0xc0;
 70c:	80 ec       	ldi	r24, 0xC0	; 192
 70e:	80 93 0b 02 	sts	0x020B, r24
 712:	08 95       	ret

00000714 <lcddinit>:
	lcdwc(0x01);
	lcdwc(0x20);
	lcdwc(0x07);
	lcdwc(0x8f);
}
void lcddinit(void) {
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
	int8u i, j, adr;
	
	lcdws("  INITIALIZING");
 71a:	8c ee       	ldi	r24, 0xEC	; 236
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <lcdws>
	lcdr2();
 722:	0e 94 83 03 	call	0x706	; 0x706 <lcdr2>
 726:	08 ec       	ldi	r16, 0xC8	; 200
 728:	10 e0       	ldi	r17, 0x00	; 0
 72a:	c0 ec       	ldi	r28, 0xC0	; 192
	for ( j = 0; j < LCD_NSCRL; j++ ) {
		adr = 0xc0;						// 2nd row, first coloumn
		for ( i = 0; i < 16; i++ ) {
			lcdwc(adr);			
 72c:	8c 2f       	mov	r24, r28
 72e:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
			lcdwd(LCD_DOT);				
 732:	8e e2       	ldi	r24, 0x2E	; 46
 734:	0e 94 4e 03 	call	0x69c	; 0x69c <lcdwd>
 738:	80 e4       	ldi	r24, 0x40	; 64
 73a:	8c 0f       	add	r24, r28
			if ( i < 8 ) dlyms(200+(50*i)); else dlyms(25);
 73c:	88 30       	cpi	r24, 0x08	; 8
 73e:	20 f4       	brcc	.+8      	; 0x748 <lcddinit+0x34>
 740:	c8 01       	movw	r24, r16
 742:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
 746:	04 c0       	rjmp	.+8      	; 0x750 <lcddinit+0x3c>
 748:	89 e1       	ldi	r24, 0x19	; 25
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
			lcdwc(adr);			
 750:	8c 2f       	mov	r24, r28
 752:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
			lcdwd(LCD_SPC);			
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	0e 94 4e 03 	call	0x69c	; 0x69c <lcdwd>
			adr++;					// increment display aadress
 75c:	cf 5f       	subi	r28, 0xFF	; 255
 75e:	0e 5c       	subi	r16, 0xCE	; 206
 760:	1f 4f       	sbci	r17, 0xFF	; 255
	
	lcdws("  INITIALIZING");
	lcdr2();
	for ( j = 0; j < LCD_NSCRL; j++ ) {
		adr = 0xc0;						// 2nd row, first coloumn
		for ( i = 0; i < 16; i++ ) {
 762:	c0 3d       	cpi	r28, 0xD0	; 208
 764:	19 f7       	brne	.-58     	; 0x72c <lcddinit+0x18>
			lcdwc(adr);			
			lcdwd(LCD_SPC);			
			adr++;					// increment display aadress
		}
	} 
}
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <lcdinit>:
		lcdwd(*s++);
	}
}

void lcdinit(void) {
    LCD_DDR = (LCD_DDR & 0x03) | 0xfc;
 76e:	84 b3       	in	r24, 0x14	; 20
 770:	8c 6f       	ori	r24, 0xFC	; 252
 772:	84 bb       	out	0x14, r24	; 20
	LCD_DATA_PORT    &=  0x03;
 774:	85 b3       	in	r24, 0x15	; 21
 776:	83 70       	andi	r24, 0x03	; 3
 778:	85 bb       	out	0x15, r24	; 21
	dlyms(40);
 77a:	88 e2       	ldi	r24, 0x28	; 40
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	#if DISPLAY_INIT > 0
		lcddinit();
	#endif
}
static void LCDReset(void) {
	lcdwc(0x33);
 782:	83 e3       	ldi	r24, 0x33	; 51
 784:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	dlyms(5);
 788:	85 e0       	ldi	r24, 0x05	; 5
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
	lcdwc(0x33);
 790:	83 e3       	ldi	r24, 0x33	; 51
 792:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	dlyus(500);
 796:	84 ef       	ldi	r24, 0xF4	; 244
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <dlyus>
	lcdwc(0x32);
 79e:	82 e3       	ldi	r24, 0x32	; 50
 7a0:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	dlyus(500);
 7a4:	84 ef       	ldi	r24, 0xF4	; 244
 7a6:	91 e0       	ldi	r25, 0x01	; 1
 7a8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <dlyus>
void lcdinit(void) {
    LCD_DDR = (LCD_DDR & 0x03) | 0xfc;
	LCD_DATA_PORT    &=  0x03;
	dlyms(40);
	LCDReset();
    lcdwc(0x28);
 7ac:	88 e2       	ldi	r24, 0x28	; 40
 7ae:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
    lcdwc(0x0C);
 7b2:	8c e0       	ldi	r24, 0x0C	; 12
 7b4:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
    lcdwc(0x06);
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
    lcdwc(0x01); 
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 4a 03 	call	0x694	; 0x694 <lcdwc>
	lcdclr();
 7c4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <lcdclr>
	#if DISPLAY_INIT > 0
		lcddinit();
 7c8:	0e 94 8a 03 	call	0x714	; 0x714 <lcddinit>
 7cc:	08 95       	ret

000007ce <reverse>:
	return (float)(sign * val) / power;
}
 
void reverse(char s[]) {
	int c,i,j;
	for (i = 0, j = strlen(s)-1; i < j; i++,j--) 
 7ce:	fc 01       	movw	r30, r24
 7d0:	01 90       	ld	r0, Z+
 7d2:	00 20       	and	r0, r0
 7d4:	e9 f7       	brne	.-6      	; 0x7d0 <reverse+0x2>
 7d6:	31 97       	sbiw	r30, 0x01	; 1
 7d8:	e8 1b       	sub	r30, r24
 7da:	f9 0b       	sbc	r31, r25
 7dc:	9f 01       	movw	r18, r30
 7de:	21 50       	subi	r18, 0x01	; 1
 7e0:	31 09       	sbc	r19, r1
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	7c f4       	brge	.+30     	; 0x806 <reverse+0x38>
 7e8:	e8 0f       	add	r30, r24
 7ea:	f9 1f       	adc	r31, r25
 7ec:	dc 01       	movw	r26, r24
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i], s[i] = s[j], s[j] = c;
 7f2:	4c 91       	ld	r20, X
 7f4:	52 91       	ld	r21, -Z
 7f6:	5d 93       	st	X+, r21
 7f8:	40 83       	st	Z, r20
	return (float)(sign * val) / power;
}
 
void reverse(char s[]) {
	int c,i,j;
	for (i = 0, j = strlen(s)-1; i < j; i++,j--) 
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	21 50       	subi	r18, 0x01	; 1
 7fe:	31 09       	sbc	r19, r1
 800:	82 17       	cp	r24, r18
 802:	93 07       	cpc	r25, r19
 804:	b4 f3       	brlt	.-20     	; 0x7f2 <reverse+0x24>
 806:	08 95       	ret

00000808 <itoa>:
	} while ((n /= 10) > 0);

	s[i] = '\0';
	reverse(s);
}
 void itoa(signed int n, char s[]){
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	8c 01       	movw	r16, r24
 816:	eb 01       	movw	r28, r22
 818:	9c 01       	movw	r18, r24
 81a:	99 23       	and	r25, r25
 81c:	24 f4       	brge	.+8      	; 0x826 <itoa+0x1e>
 81e:	22 27       	eor	r18, r18
 820:	33 27       	eor	r19, r19
 822:	28 1b       	sub	r18, r24
 824:	39 0b       	sbc	r19, r25
 826:	c9 01       	movw	r24, r18
 828:	fe 01       	movw	r30, r28
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	30 e0       	ldi	r19, 0x00	; 0
	
	if ((sign = n) < 0)
		n = -n;
	i = 0;
	do {
		s[i++] = n % 10 + '0';
 82e:	0f 2e       	mov	r0, r31
 830:	fa e0       	ldi	r31, 0x0A	; 10
 832:	ef 2e       	mov	r14, r31
 834:	f1 2c       	mov	r15, r1
 836:	f0 2d       	mov	r31, r0
 838:	2f 5f       	subi	r18, 0xFF	; 255
 83a:	3f 4f       	sbci	r19, 0xFF	; 255
 83c:	b7 01       	movw	r22, r14
 83e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divmodhi4>
 842:	80 5d       	subi	r24, 0xD0	; 208
 844:	81 93       	st	Z+, r24
	} while ((n /= 10) > 0);
 846:	86 2f       	mov	r24, r22
 848:	97 2f       	mov	r25, r23
 84a:	18 16       	cp	r1, r24
 84c:	19 06       	cpc	r1, r25
 84e:	a4 f3       	brlt	.-24     	; 0x838 <itoa+0x30>
	
	if ((sign = n) < 0)
		n = -n;
	i = 0;
	do {
		s[i++] = n % 10 + '0';
 850:	c9 01       	movw	r24, r18
	} while ((n /= 10) > 0);
	if (sign < 0)
 852:	11 23       	and	r17, r17
 854:	3c f4       	brge	.+14     	; 0x864 <__stack+0x5>
		s[i++] = '-';
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	fe 01       	movw	r30, r28
 85c:	e8 0f       	add	r30, r24
 85e:	f9 1f       	adc	r31, r25
 860:	4d e2       	ldi	r20, 0x2D	; 45
 862:	40 83       	st	Z, r20
	s[i] = '\0';
 864:	fe 01       	movw	r30, r28
 866:	e2 0f       	add	r30, r18
 868:	f3 1f       	adc	r31, r19
 86a:	10 82       	st	Z, r1
	reverse(s);
 86c:	ce 01       	movw	r24, r28
 86e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <reverse>
}
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	08 95       	ret

00000880 <ledinit>:
/* led.c : LED interface programs */
#include "led.h"

void ledinit(void)
{
	LED_DDR 		|= _BV(LED_PIN);
 880:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT 		&= ~_BV(LED_PIN);
 882:	a8 98       	cbi	0x15, 0	; 21
 884:	08 95       	ret

00000886 <RFTxInit>:
	}
#endif

#ifdef RF_TRANSMITTER_ENABLE
	void RFTxInit(void) {
		RFDDR |= _BV(RFEN_PIN);
 886:	8b 9a       	sbi	0x11, 3	; 17
		RFPORT |= _BV(RFEN_PIN);
 888:	93 9a       	sbi	0x12, 3	; 18
		RFDDR |= 0xF0;
 88a:	81 b3       	in	r24, 0x11	; 17
 88c:	80 6f       	ori	r24, 0xF0	; 240
 88e:	81 bb       	out	0x11, r24	; 17
		RFPORT &= 0x0F;
 890:	82 b3       	in	r24, 0x12	; 18
 892:	8f 70       	andi	r24, 0x0F	; 15
 894:	82 bb       	out	0x12, r24	; 18
 896:	08 95       	ret

00000898 <RFTx>:
		
	}
	void RFTx(int8u x){
		RFPORT = (RFPORT & 0x0F) | (x << 4);
 898:	22 b3       	in	r18, 0x12	; 18
 89a:	30 e1       	ldi	r19, 0x10	; 16
 89c:	83 9f       	mul	r24, r19
 89e:	c0 01       	movw	r24, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 70       	andi	r18, 0x0F	; 15
 8a4:	82 2b       	or	r24, r18
 8a6:	82 bb       	out	0x12, r24	; 18
		EnRF();
 8a8:	93 98       	cbi	0x12, 3	; 18
 8aa:	84 ef       	ldi	r24, 0xF4	; 244
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
 8b2:	93 9a       	sbi	0x12, 3	; 18
 8b4:	88 ec       	ldi	r24, 0xC8	; 200
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <dlyms>
		RFNull();
 8bc:	82 b3       	in	r24, 0x12	; 18
 8be:	8f 70       	andi	r24, 0x0F	; 15
 8c0:	82 bb       	out	0x12, r24	; 18
 8c2:	08 95       	ret

000008c4 <swinit>:
#include "sw.h"

void swinit(void) {
	SW_DDR 		&= ~_BV(SW1_PIN);
 8c4:	8a 98       	cbi	0x11, 2	; 17
	SW_PORT 	|= _BV(SW1_PIN);
 8c6:	92 9a       	sbi	0x12, 2	; 18
 8c8:	08 95       	ret

000008ca <__divmodhi4>:
 8ca:	97 fb       	bst	r25, 7
 8cc:	07 2e       	mov	r0, r23
 8ce:	16 f4       	brtc	.+4      	; 0x8d4 <__divmodhi4+0xa>
 8d0:	00 94       	com	r0
 8d2:	07 d0       	rcall	.+14     	; 0x8e2 <__divmodhi4_neg1>
 8d4:	77 fd       	sbrc	r23, 7
 8d6:	09 d0       	rcall	.+18     	; 0x8ea <__divmodhi4_neg2>
 8d8:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodhi4>
 8dc:	07 fc       	sbrc	r0, 7
 8de:	05 d0       	rcall	.+10     	; 0x8ea <__divmodhi4_neg2>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__divmodhi4_exit>

000008e2 <__divmodhi4_neg1>:
 8e2:	90 95       	com	r25
 8e4:	81 95       	neg	r24
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	08 95       	ret

000008ea <__divmodhi4_neg2>:
 8ea:	70 95       	com	r23
 8ec:	61 95       	neg	r22
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255

000008f0 <__divmodhi4_exit>:
 8f0:	08 95       	ret

000008f2 <__umulhisi3>:
 8f2:	a2 9f       	mul	r26, r18
 8f4:	b0 01       	movw	r22, r0
 8f6:	b3 9f       	mul	r27, r19
 8f8:	c0 01       	movw	r24, r0
 8fa:	a3 9f       	mul	r26, r19
 8fc:	70 0d       	add	r23, r0
 8fe:	81 1d       	adc	r24, r1
 900:	11 24       	eor	r1, r1
 902:	91 1d       	adc	r25, r1
 904:	b2 9f       	mul	r27, r18
 906:	70 0d       	add	r23, r0
 908:	81 1d       	adc	r24, r1
 90a:	11 24       	eor	r1, r1
 90c:	91 1d       	adc	r25, r1
 90e:	08 95       	ret

00000910 <__udivmodhi4>:
 910:	aa 1b       	sub	r26, r26
 912:	bb 1b       	sub	r27, r27
 914:	51 e1       	ldi	r21, 0x11	; 17
 916:	07 c0       	rjmp	.+14     	; 0x926 <__udivmodhi4_ep>

00000918 <__udivmodhi4_loop>:
 918:	aa 1f       	adc	r26, r26
 91a:	bb 1f       	adc	r27, r27
 91c:	a6 17       	cp	r26, r22
 91e:	b7 07       	cpc	r27, r23
 920:	10 f0       	brcs	.+4      	; 0x926 <__udivmodhi4_ep>
 922:	a6 1b       	sub	r26, r22
 924:	b7 0b       	sbc	r27, r23

00000926 <__udivmodhi4_ep>:
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	5a 95       	dec	r21
 92c:	a9 f7       	brne	.-22     	; 0x918 <__udivmodhi4_loop>
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	bc 01       	movw	r22, r24
 934:	cd 01       	movw	r24, r26
 936:	08 95       	ret

00000938 <sprintf>:
 938:	ae e0       	ldi	r26, 0x0E	; 14
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e2 ea       	ldi	r30, 0xA2	; 162
 93e:	f4 e0       	ldi	r31, 0x04	; 4
 940:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__prologue_saves__+0x1c>
 944:	0d 89       	ldd	r16, Y+21	; 0x15
 946:	1e 89       	ldd	r17, Y+22	; 0x16
 948:	86 e0       	ldi	r24, 0x06	; 6
 94a:	8c 83       	std	Y+4, r24	; 0x04
 94c:	1a 83       	std	Y+2, r17	; 0x02
 94e:	09 83       	std	Y+1, r16	; 0x01
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	9f e7       	ldi	r25, 0x7F	; 127
 954:	9e 83       	std	Y+6, r25	; 0x06
 956:	8d 83       	std	Y+5, r24	; 0x05
 958:	ae 01       	movw	r20, r28
 95a:	47 5e       	subi	r20, 0xE7	; 231
 95c:	5f 4f       	sbci	r21, 0xFF	; 255
 95e:	6f 89       	ldd	r22, Y+23	; 0x17
 960:	78 8d       	ldd	r23, Y+24	; 0x18
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	0e 94 bf 04 	call	0x97e	; 0x97e <vfprintf>
 96a:	2f 81       	ldd	r18, Y+7	; 0x07
 96c:	38 85       	ldd	r19, Y+8	; 0x08
 96e:	f8 01       	movw	r30, r16
 970:	e2 0f       	add	r30, r18
 972:	f3 1f       	adc	r31, r19
 974:	10 82       	st	Z, r1
 976:	2e 96       	adiw	r28, 0x0e	; 14
 978:	e4 e0       	ldi	r30, 0x04	; 4
 97a:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__epilogue_restores__+0x1c>

0000097e <vfprintf>:
 97e:	ac e0       	ldi	r26, 0x0C	; 12
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	e5 ec       	ldi	r30, 0xC5	; 197
 984:	f4 e0       	ldi	r31, 0x04	; 4
 986:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__prologue_saves__>
 98a:	7c 01       	movw	r14, r24
 98c:	6b 01       	movw	r12, r22
 98e:	8a 01       	movw	r16, r20
 990:	fc 01       	movw	r30, r24
 992:	17 82       	std	Z+7, r1	; 0x07
 994:	16 82       	std	Z+6, r1	; 0x06
 996:	83 81       	ldd	r24, Z+3	; 0x03
 998:	81 ff       	sbrs	r24, 1
 99a:	bd c1       	rjmp	.+890    	; 0xd16 <vfprintf+0x398>
 99c:	ce 01       	movw	r24, r28
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	4c 01       	movw	r8, r24
 9a2:	f7 01       	movw	r30, r14
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	f6 01       	movw	r30, r12
 9a8:	93 fd       	sbrc	r25, 3
 9aa:	85 91       	lpm	r24, Z+
 9ac:	93 ff       	sbrs	r25, 3
 9ae:	81 91       	ld	r24, Z+
 9b0:	6f 01       	movw	r12, r30
 9b2:	88 23       	and	r24, r24
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <vfprintf+0x3a>
 9b6:	ab c1       	rjmp	.+854    	; 0xd0e <vfprintf+0x390>
 9b8:	85 32       	cpi	r24, 0x25	; 37
 9ba:	39 f4       	brne	.+14     	; 0x9ca <vfprintf+0x4c>
 9bc:	93 fd       	sbrc	r25, 3
 9be:	85 91       	lpm	r24, Z+
 9c0:	93 ff       	sbrs	r25, 3
 9c2:	81 91       	ld	r24, Z+
 9c4:	6f 01       	movw	r12, r30
 9c6:	85 32       	cpi	r24, 0x25	; 37
 9c8:	29 f4       	brne	.+10     	; 0x9d4 <vfprintf+0x56>
 9ca:	b7 01       	movw	r22, r14
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 9d2:	e7 cf       	rjmp	.-50     	; 0x9a2 <vfprintf+0x24>
 9d4:	51 2c       	mov	r5, r1
 9d6:	31 2c       	mov	r3, r1
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	20 32       	cpi	r18, 0x20	; 32
 9dc:	a0 f4       	brcc	.+40     	; 0xa06 <vfprintf+0x88>
 9de:	8b 32       	cpi	r24, 0x2B	; 43
 9e0:	69 f0       	breq	.+26     	; 0x9fc <vfprintf+0x7e>
 9e2:	30 f4       	brcc	.+12     	; 0x9f0 <vfprintf+0x72>
 9e4:	80 32       	cpi	r24, 0x20	; 32
 9e6:	59 f0       	breq	.+22     	; 0x9fe <vfprintf+0x80>
 9e8:	83 32       	cpi	r24, 0x23	; 35
 9ea:	69 f4       	brne	.+26     	; 0xa06 <vfprintf+0x88>
 9ec:	20 61       	ori	r18, 0x10	; 16
 9ee:	2c c0       	rjmp	.+88     	; 0xa48 <vfprintf+0xca>
 9f0:	8d 32       	cpi	r24, 0x2D	; 45
 9f2:	39 f0       	breq	.+14     	; 0xa02 <vfprintf+0x84>
 9f4:	80 33       	cpi	r24, 0x30	; 48
 9f6:	39 f4       	brne	.+14     	; 0xa06 <vfprintf+0x88>
 9f8:	21 60       	ori	r18, 0x01	; 1
 9fa:	26 c0       	rjmp	.+76     	; 0xa48 <vfprintf+0xca>
 9fc:	22 60       	ori	r18, 0x02	; 2
 9fe:	24 60       	ori	r18, 0x04	; 4
 a00:	23 c0       	rjmp	.+70     	; 0xa48 <vfprintf+0xca>
 a02:	28 60       	ori	r18, 0x08	; 8
 a04:	21 c0       	rjmp	.+66     	; 0xa48 <vfprintf+0xca>
 a06:	27 fd       	sbrc	r18, 7
 a08:	27 c0       	rjmp	.+78     	; 0xa58 <vfprintf+0xda>
 a0a:	30 ed       	ldi	r19, 0xD0	; 208
 a0c:	38 0f       	add	r19, r24
 a0e:	3a 30       	cpi	r19, 0x0A	; 10
 a10:	78 f4       	brcc	.+30     	; 0xa30 <vfprintf+0xb2>
 a12:	26 ff       	sbrs	r18, 6
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <vfprintf+0xa4>
 a16:	fa e0       	ldi	r31, 0x0A	; 10
 a18:	5f 9e       	mul	r5, r31
 a1a:	30 0d       	add	r19, r0
 a1c:	11 24       	eor	r1, r1
 a1e:	53 2e       	mov	r5, r19
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <vfprintf+0xca>
 a22:	8a e0       	ldi	r24, 0x0A	; 10
 a24:	38 9e       	mul	r3, r24
 a26:	30 0d       	add	r19, r0
 a28:	11 24       	eor	r1, r1
 a2a:	33 2e       	mov	r3, r19
 a2c:	20 62       	ori	r18, 0x20	; 32
 a2e:	0c c0       	rjmp	.+24     	; 0xa48 <vfprintf+0xca>
 a30:	8e 32       	cpi	r24, 0x2E	; 46
 a32:	21 f4       	brne	.+8      	; 0xa3c <vfprintf+0xbe>
 a34:	26 fd       	sbrc	r18, 6
 a36:	6b c1       	rjmp	.+726    	; 0xd0e <vfprintf+0x390>
 a38:	20 64       	ori	r18, 0x40	; 64
 a3a:	06 c0       	rjmp	.+12     	; 0xa48 <vfprintf+0xca>
 a3c:	8c 36       	cpi	r24, 0x6C	; 108
 a3e:	11 f4       	brne	.+4      	; 0xa44 <vfprintf+0xc6>
 a40:	20 68       	ori	r18, 0x80	; 128
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <vfprintf+0xca>
 a44:	88 36       	cpi	r24, 0x68	; 104
 a46:	41 f4       	brne	.+16     	; 0xa58 <vfprintf+0xda>
 a48:	f6 01       	movw	r30, r12
 a4a:	93 fd       	sbrc	r25, 3
 a4c:	85 91       	lpm	r24, Z+
 a4e:	93 ff       	sbrs	r25, 3
 a50:	81 91       	ld	r24, Z+
 a52:	6f 01       	movw	r12, r30
 a54:	81 11       	cpse	r24, r1
 a56:	c1 cf       	rjmp	.-126    	; 0x9da <vfprintf+0x5c>
 a58:	98 2f       	mov	r25, r24
 a5a:	9f 7d       	andi	r25, 0xDF	; 223
 a5c:	95 54       	subi	r25, 0x45	; 69
 a5e:	93 30       	cpi	r25, 0x03	; 3
 a60:	28 f4       	brcc	.+10     	; 0xa6c <vfprintf+0xee>
 a62:	0c 5f       	subi	r16, 0xFC	; 252
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	ff e3       	ldi	r31, 0x3F	; 63
 a68:	f9 83       	std	Y+1, r31	; 0x01
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <vfprintf+0x108>
 a6c:	83 36       	cpi	r24, 0x63	; 99
 a6e:	31 f0       	breq	.+12     	; 0xa7c <vfprintf+0xfe>
 a70:	83 37       	cpi	r24, 0x73	; 115
 a72:	71 f0       	breq	.+28     	; 0xa90 <vfprintf+0x112>
 a74:	83 35       	cpi	r24, 0x53	; 83
 a76:	09 f0       	breq	.+2      	; 0xa7a <vfprintf+0xfc>
 a78:	5b c0       	rjmp	.+182    	; 0xb30 <vfprintf+0x1b2>
 a7a:	22 c0       	rjmp	.+68     	; 0xac0 <vfprintf+0x142>
 a7c:	f8 01       	movw	r30, r16
 a7e:	80 81       	ld	r24, Z
 a80:	89 83       	std	Y+1, r24	; 0x01
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	44 24       	eor	r4, r4
 a88:	43 94       	inc	r4
 a8a:	51 2c       	mov	r5, r1
 a8c:	54 01       	movw	r10, r8
 a8e:	15 c0       	rjmp	.+42     	; 0xaba <vfprintf+0x13c>
 a90:	38 01       	movw	r6, r16
 a92:	f2 e0       	ldi	r31, 0x02	; 2
 a94:	6f 0e       	add	r6, r31
 a96:	71 1c       	adc	r7, r1
 a98:	f8 01       	movw	r30, r16
 a9a:	a0 80       	ld	r10, Z
 a9c:	b1 80       	ldd	r11, Z+1	; 0x01
 a9e:	26 ff       	sbrs	r18, 6
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x12a>
 aa2:	65 2d       	mov	r22, r5
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x12e>
 aa8:	6f ef       	ldi	r22, 0xFF	; 255
 aaa:	7f ef       	ldi	r23, 0xFF	; 255
 aac:	c5 01       	movw	r24, r10
 aae:	2c 87       	std	Y+12, r18	; 0x0c
 ab0:	0e 94 9c 06 	call	0xd38	; 0xd38 <strnlen>
 ab4:	2c 01       	movw	r4, r24
 ab6:	83 01       	movw	r16, r6
 ab8:	2c 85       	ldd	r18, Y+12	; 0x0c
 aba:	2f 77       	andi	r18, 0x7F	; 127
 abc:	22 2e       	mov	r2, r18
 abe:	17 c0       	rjmp	.+46     	; 0xaee <vfprintf+0x170>
 ac0:	38 01       	movw	r6, r16
 ac2:	f2 e0       	ldi	r31, 0x02	; 2
 ac4:	6f 0e       	add	r6, r31
 ac6:	71 1c       	adc	r7, r1
 ac8:	f8 01       	movw	r30, r16
 aca:	a0 80       	ld	r10, Z
 acc:	b1 80       	ldd	r11, Z+1	; 0x01
 ace:	26 ff       	sbrs	r18, 6
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <vfprintf+0x15a>
 ad2:	65 2d       	mov	r22, r5
 ad4:	70 e0       	ldi	r23, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x15e>
 ad8:	6f ef       	ldi	r22, 0xFF	; 255
 ada:	7f ef       	ldi	r23, 0xFF	; 255
 adc:	c5 01       	movw	r24, r10
 ade:	2c 87       	std	Y+12, r18	; 0x0c
 ae0:	0e 94 91 06 	call	0xd22	; 0xd22 <strnlen_P>
 ae4:	2c 01       	movw	r4, r24
 ae6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae8:	20 68       	ori	r18, 0x80	; 128
 aea:	22 2e       	mov	r2, r18
 aec:	83 01       	movw	r16, r6
 aee:	23 fc       	sbrc	r2, 3
 af0:	1b c0       	rjmp	.+54     	; 0xb28 <vfprintf+0x1aa>
 af2:	83 2d       	mov	r24, r3
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	48 16       	cp	r4, r24
 af8:	59 06       	cpc	r5, r25
 afa:	b0 f4       	brcc	.+44     	; 0xb28 <vfprintf+0x1aa>
 afc:	b7 01       	movw	r22, r14
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 b06:	3a 94       	dec	r3
 b08:	f4 cf       	rjmp	.-24     	; 0xaf2 <vfprintf+0x174>
 b0a:	f5 01       	movw	r30, r10
 b0c:	27 fc       	sbrc	r2, 7
 b0e:	85 91       	lpm	r24, Z+
 b10:	27 fe       	sbrs	r2, 7
 b12:	81 91       	ld	r24, Z+
 b14:	5f 01       	movw	r10, r30
 b16:	b7 01       	movw	r22, r14
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 b1e:	31 10       	cpse	r3, r1
 b20:	3a 94       	dec	r3
 b22:	f1 e0       	ldi	r31, 0x01	; 1
 b24:	4f 1a       	sub	r4, r31
 b26:	51 08       	sbc	r5, r1
 b28:	41 14       	cp	r4, r1
 b2a:	51 04       	cpc	r5, r1
 b2c:	71 f7       	brne	.-36     	; 0xb0a <vfprintf+0x18c>
 b2e:	e5 c0       	rjmp	.+458    	; 0xcfa <vfprintf+0x37c>
 b30:	84 36       	cpi	r24, 0x64	; 100
 b32:	11 f0       	breq	.+4      	; 0xb38 <vfprintf+0x1ba>
 b34:	89 36       	cpi	r24, 0x69	; 105
 b36:	39 f5       	brne	.+78     	; 0xb86 <vfprintf+0x208>
 b38:	f8 01       	movw	r30, r16
 b3a:	27 ff       	sbrs	r18, 7
 b3c:	07 c0       	rjmp	.+14     	; 0xb4c <vfprintf+0x1ce>
 b3e:	60 81       	ld	r22, Z
 b40:	71 81       	ldd	r23, Z+1	; 0x01
 b42:	82 81       	ldd	r24, Z+2	; 0x02
 b44:	93 81       	ldd	r25, Z+3	; 0x03
 b46:	0c 5f       	subi	r16, 0xFC	; 252
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	08 c0       	rjmp	.+16     	; 0xb5c <vfprintf+0x1de>
 b4c:	60 81       	ld	r22, Z
 b4e:	71 81       	ldd	r23, Z+1	; 0x01
 b50:	07 2e       	mov	r0, r23
 b52:	00 0c       	add	r0, r0
 b54:	88 0b       	sbc	r24, r24
 b56:	99 0b       	sbc	r25, r25
 b58:	0e 5f       	subi	r16, 0xFE	; 254
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	2f 76       	andi	r18, 0x6F	; 111
 b5e:	72 2e       	mov	r7, r18
 b60:	97 ff       	sbrs	r25, 7
 b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x1f8>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	20 68       	ori	r18, 0x80	; 128
 b74:	72 2e       	mov	r7, r18
 b76:	2a e0       	ldi	r18, 0x0A	; 10
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	a4 01       	movw	r20, r8
 b7c:	0e 94 df 06 	call	0xdbe	; 0xdbe <__ultoa_invert>
 b80:	a8 2e       	mov	r10, r24
 b82:	a8 18       	sub	r10, r8
 b84:	44 c0       	rjmp	.+136    	; 0xc0e <vfprintf+0x290>
 b86:	85 37       	cpi	r24, 0x75	; 117
 b88:	29 f4       	brne	.+10     	; 0xb94 <vfprintf+0x216>
 b8a:	2f 7e       	andi	r18, 0xEF	; 239
 b8c:	b2 2e       	mov	r11, r18
 b8e:	2a e0       	ldi	r18, 0x0A	; 10
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	25 c0       	rjmp	.+74     	; 0xbde <vfprintf+0x260>
 b94:	f2 2f       	mov	r31, r18
 b96:	f9 7f       	andi	r31, 0xF9	; 249
 b98:	bf 2e       	mov	r11, r31
 b9a:	8f 36       	cpi	r24, 0x6F	; 111
 b9c:	c1 f0       	breq	.+48     	; 0xbce <vfprintf+0x250>
 b9e:	18 f4       	brcc	.+6      	; 0xba6 <vfprintf+0x228>
 ba0:	88 35       	cpi	r24, 0x58	; 88
 ba2:	79 f0       	breq	.+30     	; 0xbc2 <vfprintf+0x244>
 ba4:	b4 c0       	rjmp	.+360    	; 0xd0e <vfprintf+0x390>
 ba6:	80 37       	cpi	r24, 0x70	; 112
 ba8:	19 f0       	breq	.+6      	; 0xbb0 <vfprintf+0x232>
 baa:	88 37       	cpi	r24, 0x78	; 120
 bac:	21 f0       	breq	.+8      	; 0xbb6 <vfprintf+0x238>
 bae:	af c0       	rjmp	.+350    	; 0xd0e <vfprintf+0x390>
 bb0:	2f 2f       	mov	r18, r31
 bb2:	20 61       	ori	r18, 0x10	; 16
 bb4:	b2 2e       	mov	r11, r18
 bb6:	b4 fe       	sbrs	r11, 4
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x256>
 bba:	8b 2d       	mov	r24, r11
 bbc:	84 60       	ori	r24, 0x04	; 4
 bbe:	b8 2e       	mov	r11, r24
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x256>
 bc2:	24 ff       	sbrs	r18, 4
 bc4:	0a c0       	rjmp	.+20     	; 0xbda <vfprintf+0x25c>
 bc6:	9f 2f       	mov	r25, r31
 bc8:	96 60       	ori	r25, 0x06	; 6
 bca:	b9 2e       	mov	r11, r25
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x25c>
 bce:	28 e0       	ldi	r18, 0x08	; 8
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x260>
 bd4:	20 e1       	ldi	r18, 0x10	; 16
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <vfprintf+0x260>
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	32 e0       	ldi	r19, 0x02	; 2
 bde:	f8 01       	movw	r30, r16
 be0:	b7 fe       	sbrs	r11, 7
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <vfprintf+0x274>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	82 81       	ldd	r24, Z+2	; 0x02
 bea:	93 81       	ldd	r25, Z+3	; 0x03
 bec:	0c 5f       	subi	r16, 0xFC	; 252
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0x280>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 5f       	subi	r16, 0xFE	; 254
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	a4 01       	movw	r20, r8
 c00:	0e 94 df 06 	call	0xdbe	; 0xdbe <__ultoa_invert>
 c04:	a8 2e       	mov	r10, r24
 c06:	a8 18       	sub	r10, r8
 c08:	fb 2d       	mov	r31, r11
 c0a:	ff 77       	andi	r31, 0x7F	; 127
 c0c:	7f 2e       	mov	r7, r31
 c0e:	76 fe       	sbrs	r7, 6
 c10:	0b c0       	rjmp	.+22     	; 0xc28 <vfprintf+0x2aa>
 c12:	37 2d       	mov	r19, r7
 c14:	3e 7f       	andi	r19, 0xFE	; 254
 c16:	a5 14       	cp	r10, r5
 c18:	50 f4       	brcc	.+20     	; 0xc2e <vfprintf+0x2b0>
 c1a:	74 fe       	sbrs	r7, 4
 c1c:	0a c0       	rjmp	.+20     	; 0xc32 <vfprintf+0x2b4>
 c1e:	72 fc       	sbrc	r7, 2
 c20:	08 c0       	rjmp	.+16     	; 0xc32 <vfprintf+0x2b4>
 c22:	37 2d       	mov	r19, r7
 c24:	3e 7e       	andi	r19, 0xEE	; 238
 c26:	05 c0       	rjmp	.+10     	; 0xc32 <vfprintf+0x2b4>
 c28:	ba 2c       	mov	r11, r10
 c2a:	37 2d       	mov	r19, r7
 c2c:	03 c0       	rjmp	.+6      	; 0xc34 <vfprintf+0x2b6>
 c2e:	ba 2c       	mov	r11, r10
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <vfprintf+0x2b6>
 c32:	b5 2c       	mov	r11, r5
 c34:	34 ff       	sbrs	r19, 4
 c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x2d4>
 c38:	fe 01       	movw	r30, r28
 c3a:	ea 0d       	add	r30, r10
 c3c:	f1 1d       	adc	r31, r1
 c3e:	80 81       	ld	r24, Z
 c40:	80 33       	cpi	r24, 0x30	; 48
 c42:	11 f4       	brne	.+4      	; 0xc48 <vfprintf+0x2ca>
 c44:	39 7e       	andi	r19, 0xE9	; 233
 c46:	09 c0       	rjmp	.+18     	; 0xc5a <vfprintf+0x2dc>
 c48:	32 ff       	sbrs	r19, 2
 c4a:	06 c0       	rjmp	.+12     	; 0xc58 <vfprintf+0x2da>
 c4c:	b3 94       	inc	r11
 c4e:	b3 94       	inc	r11
 c50:	04 c0       	rjmp	.+8      	; 0xc5a <vfprintf+0x2dc>
 c52:	83 2f       	mov	r24, r19
 c54:	86 78       	andi	r24, 0x86	; 134
 c56:	09 f0       	breq	.+2      	; 0xc5a <vfprintf+0x2dc>
 c58:	b3 94       	inc	r11
 c5a:	33 fd       	sbrc	r19, 3
 c5c:	13 c0       	rjmp	.+38     	; 0xc84 <vfprintf+0x306>
 c5e:	30 ff       	sbrs	r19, 0
 c60:	06 c0       	rjmp	.+12     	; 0xc6e <vfprintf+0x2f0>
 c62:	5a 2c       	mov	r5, r10
 c64:	b3 14       	cp	r11, r3
 c66:	18 f4       	brcc	.+6      	; 0xc6e <vfprintf+0x2f0>
 c68:	53 0c       	add	r5, r3
 c6a:	5b 18       	sub	r5, r11
 c6c:	b3 2c       	mov	r11, r3
 c6e:	b3 14       	cp	r11, r3
 c70:	68 f4       	brcc	.+26     	; 0xc8c <vfprintf+0x30e>
 c72:	b7 01       	movw	r22, r14
 c74:	80 e2       	ldi	r24, 0x20	; 32
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	3c 87       	std	Y+12, r19	; 0x0c
 c7a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c7e:	b3 94       	inc	r11
 c80:	3c 85       	ldd	r19, Y+12	; 0x0c
 c82:	f5 cf       	rjmp	.-22     	; 0xc6e <vfprintf+0x2f0>
 c84:	b3 14       	cp	r11, r3
 c86:	10 f4       	brcc	.+4      	; 0xc8c <vfprintf+0x30e>
 c88:	3b 18       	sub	r3, r11
 c8a:	01 c0       	rjmp	.+2      	; 0xc8e <vfprintf+0x310>
 c8c:	31 2c       	mov	r3, r1
 c8e:	34 ff       	sbrs	r19, 4
 c90:	12 c0       	rjmp	.+36     	; 0xcb6 <vfprintf+0x338>
 c92:	b7 01       	movw	r22, r14
 c94:	80 e3       	ldi	r24, 0x30	; 48
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	3c 87       	std	Y+12, r19	; 0x0c
 c9a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c9e:	3c 85       	ldd	r19, Y+12	; 0x0c
 ca0:	32 ff       	sbrs	r19, 2
 ca2:	17 c0       	rjmp	.+46     	; 0xcd2 <vfprintf+0x354>
 ca4:	31 fd       	sbrc	r19, 1
 ca6:	03 c0       	rjmp	.+6      	; 0xcae <vfprintf+0x330>
 ca8:	88 e7       	ldi	r24, 0x78	; 120
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x334>
 cae:	88 e5       	ldi	r24, 0x58	; 88
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	b7 01       	movw	r22, r14
 cb4:	0c c0       	rjmp	.+24     	; 0xcce <vfprintf+0x350>
 cb6:	83 2f       	mov	r24, r19
 cb8:	86 78       	andi	r24, 0x86	; 134
 cba:	59 f0       	breq	.+22     	; 0xcd2 <vfprintf+0x354>
 cbc:	31 ff       	sbrs	r19, 1
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <vfprintf+0x346>
 cc0:	8b e2       	ldi	r24, 0x2B	; 43
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <vfprintf+0x348>
 cc4:	80 e2       	ldi	r24, 0x20	; 32
 cc6:	37 fd       	sbrc	r19, 7
 cc8:	8d e2       	ldi	r24, 0x2D	; 45
 cca:	b7 01       	movw	r22, r14
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cd2:	a5 14       	cp	r10, r5
 cd4:	38 f4       	brcc	.+14     	; 0xce4 <vfprintf+0x366>
 cd6:	b7 01       	movw	r22, r14
 cd8:	80 e3       	ldi	r24, 0x30	; 48
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 ce0:	5a 94       	dec	r5
 ce2:	f7 cf       	rjmp	.-18     	; 0xcd2 <vfprintf+0x354>
 ce4:	aa 94       	dec	r10
 ce6:	f4 01       	movw	r30, r8
 ce8:	ea 0d       	add	r30, r10
 cea:	f1 1d       	adc	r31, r1
 cec:	80 81       	ld	r24, Z
 cee:	b7 01       	movw	r22, r14
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cf6:	a1 10       	cpse	r10, r1
 cf8:	f5 cf       	rjmp	.-22     	; 0xce4 <vfprintf+0x366>
 cfa:	33 20       	and	r3, r3
 cfc:	09 f4       	brne	.+2      	; 0xd00 <vfprintf+0x382>
 cfe:	51 ce       	rjmp	.-862    	; 0x9a2 <vfprintf+0x24>
 d00:	b7 01       	movw	r22, r14
 d02:	80 e2       	ldi	r24, 0x20	; 32
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 d0a:	3a 94       	dec	r3
 d0c:	f6 cf       	rjmp	.-20     	; 0xcfa <vfprintf+0x37c>
 d0e:	f7 01       	movw	r30, r14
 d10:	86 81       	ldd	r24, Z+6	; 0x06
 d12:	97 81       	ldd	r25, Z+7	; 0x07
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfprintf+0x39c>
 d16:	8f ef       	ldi	r24, 0xFF	; 255
 d18:	9f ef       	ldi	r25, 0xFF	; 255
 d1a:	2c 96       	adiw	r28, 0x0c	; 12
 d1c:	e2 e1       	ldi	r30, 0x12	; 18
 d1e:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__epilogue_restores__>

00000d22 <strnlen_P>:
 d22:	fc 01       	movw	r30, r24
 d24:	05 90       	lpm	r0, Z+
 d26:	61 50       	subi	r22, 0x01	; 1
 d28:	70 40       	sbci	r23, 0x00	; 0
 d2a:	01 10       	cpse	r0, r1
 d2c:	d8 f7       	brcc	.-10     	; 0xd24 <strnlen_P+0x2>
 d2e:	80 95       	com	r24
 d30:	90 95       	com	r25
 d32:	8e 0f       	add	r24, r30
 d34:	9f 1f       	adc	r25, r31
 d36:	08 95       	ret

00000d38 <strnlen>:
 d38:	fc 01       	movw	r30, r24
 d3a:	61 50       	subi	r22, 0x01	; 1
 d3c:	70 40       	sbci	r23, 0x00	; 0
 d3e:	01 90       	ld	r0, Z+
 d40:	01 10       	cpse	r0, r1
 d42:	d8 f7       	brcc	.-10     	; 0xd3a <strnlen+0x2>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	08 95       	ret

00000d4e <fputc>:
 d4e:	0f 93       	push	r16
 d50:	1f 93       	push	r17
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	fb 01       	movw	r30, r22
 d58:	23 81       	ldd	r18, Z+3	; 0x03
 d5a:	21 fd       	sbrc	r18, 1
 d5c:	03 c0       	rjmp	.+6      	; 0xd64 <fputc+0x16>
 d5e:	8f ef       	ldi	r24, 0xFF	; 255
 d60:	9f ef       	ldi	r25, 0xFF	; 255
 d62:	28 c0       	rjmp	.+80     	; 0xdb4 <fputc+0x66>
 d64:	22 ff       	sbrs	r18, 2
 d66:	16 c0       	rjmp	.+44     	; 0xd94 <fputc+0x46>
 d68:	46 81       	ldd	r20, Z+6	; 0x06
 d6a:	57 81       	ldd	r21, Z+7	; 0x07
 d6c:	24 81       	ldd	r18, Z+4	; 0x04
 d6e:	35 81       	ldd	r19, Z+5	; 0x05
 d70:	42 17       	cp	r20, r18
 d72:	53 07       	cpc	r21, r19
 d74:	44 f4       	brge	.+16     	; 0xd86 <fputc+0x38>
 d76:	a0 81       	ld	r26, Z
 d78:	b1 81       	ldd	r27, Z+1	; 0x01
 d7a:	9d 01       	movw	r18, r26
 d7c:	2f 5f       	subi	r18, 0xFF	; 255
 d7e:	3f 4f       	sbci	r19, 0xFF	; 255
 d80:	31 83       	std	Z+1, r19	; 0x01
 d82:	20 83       	st	Z, r18
 d84:	8c 93       	st	X, r24
 d86:	26 81       	ldd	r18, Z+6	; 0x06
 d88:	37 81       	ldd	r19, Z+7	; 0x07
 d8a:	2f 5f       	subi	r18, 0xFF	; 255
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	37 83       	std	Z+7, r19	; 0x07
 d90:	26 83       	std	Z+6, r18	; 0x06
 d92:	10 c0       	rjmp	.+32     	; 0xdb4 <fputc+0x66>
 d94:	eb 01       	movw	r28, r22
 d96:	09 2f       	mov	r16, r25
 d98:	18 2f       	mov	r17, r24
 d9a:	00 84       	ldd	r0, Z+8	; 0x08
 d9c:	f1 85       	ldd	r31, Z+9	; 0x09
 d9e:	e0 2d       	mov	r30, r0
 da0:	09 95       	icall
 da2:	89 2b       	or	r24, r25
 da4:	e1 f6       	brne	.-72     	; 0xd5e <fputc+0x10>
 da6:	8e 81       	ldd	r24, Y+6	; 0x06
 da8:	9f 81       	ldd	r25, Y+7	; 0x07
 daa:	01 96       	adiw	r24, 0x01	; 1
 dac:	9f 83       	std	Y+7, r25	; 0x07
 dae:	8e 83       	std	Y+6, r24	; 0x06
 db0:	81 2f       	mov	r24, r17
 db2:	90 2f       	mov	r25, r16
 db4:	df 91       	pop	r29
 db6:	cf 91       	pop	r28
 db8:	1f 91       	pop	r17
 dba:	0f 91       	pop	r16
 dbc:	08 95       	ret

00000dbe <__ultoa_invert>:
 dbe:	fa 01       	movw	r30, r20
 dc0:	aa 27       	eor	r26, r26
 dc2:	28 30       	cpi	r18, 0x08	; 8
 dc4:	51 f1       	breq	.+84     	; 0xe1a <__ultoa_invert+0x5c>
 dc6:	20 31       	cpi	r18, 0x10	; 16
 dc8:	81 f1       	breq	.+96     	; 0xe2a <__ultoa_invert+0x6c>
 dca:	e8 94       	clt
 dcc:	6f 93       	push	r22
 dce:	6e 7f       	andi	r22, 0xFE	; 254
 dd0:	6e 5f       	subi	r22, 0xFE	; 254
 dd2:	7f 4f       	sbci	r23, 0xFF	; 255
 dd4:	8f 4f       	sbci	r24, 0xFF	; 255
 dd6:	9f 4f       	sbci	r25, 0xFF	; 255
 dd8:	af 4f       	sbci	r26, 0xFF	; 255
 dda:	b1 e0       	ldi	r27, 0x01	; 1
 ddc:	3e d0       	rcall	.+124    	; 0xe5a <__ultoa_invert+0x9c>
 dde:	b4 e0       	ldi	r27, 0x04	; 4
 de0:	3c d0       	rcall	.+120    	; 0xe5a <__ultoa_invert+0x9c>
 de2:	67 0f       	add	r22, r23
 de4:	78 1f       	adc	r23, r24
 de6:	89 1f       	adc	r24, r25
 de8:	9a 1f       	adc	r25, r26
 dea:	a1 1d       	adc	r26, r1
 dec:	68 0f       	add	r22, r24
 dee:	79 1f       	adc	r23, r25
 df0:	8a 1f       	adc	r24, r26
 df2:	91 1d       	adc	r25, r1
 df4:	a1 1d       	adc	r26, r1
 df6:	6a 0f       	add	r22, r26
 df8:	71 1d       	adc	r23, r1
 dfa:	81 1d       	adc	r24, r1
 dfc:	91 1d       	adc	r25, r1
 dfe:	a1 1d       	adc	r26, r1
 e00:	20 d0       	rcall	.+64     	; 0xe42 <__ultoa_invert+0x84>
 e02:	09 f4       	brne	.+2      	; 0xe06 <__ultoa_invert+0x48>
 e04:	68 94       	set
 e06:	3f 91       	pop	r19
 e08:	2a e0       	ldi	r18, 0x0A	; 10
 e0a:	26 9f       	mul	r18, r22
 e0c:	11 24       	eor	r1, r1
 e0e:	30 19       	sub	r19, r0
 e10:	30 5d       	subi	r19, 0xD0	; 208
 e12:	31 93       	st	Z+, r19
 e14:	de f6       	brtc	.-74     	; 0xdcc <__ultoa_invert+0xe>
 e16:	cf 01       	movw	r24, r30
 e18:	08 95       	ret
 e1a:	46 2f       	mov	r20, r22
 e1c:	47 70       	andi	r20, 0x07	; 7
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	41 93       	st	Z+, r20
 e22:	b3 e0       	ldi	r27, 0x03	; 3
 e24:	0f d0       	rcall	.+30     	; 0xe44 <__ultoa_invert+0x86>
 e26:	c9 f7       	brne	.-14     	; 0xe1a <__ultoa_invert+0x5c>
 e28:	f6 cf       	rjmp	.-20     	; 0xe16 <__ultoa_invert+0x58>
 e2a:	46 2f       	mov	r20, r22
 e2c:	4f 70       	andi	r20, 0x0F	; 15
 e2e:	40 5d       	subi	r20, 0xD0	; 208
 e30:	4a 33       	cpi	r20, 0x3A	; 58
 e32:	18 f0       	brcs	.+6      	; 0xe3a <__ultoa_invert+0x7c>
 e34:	49 5d       	subi	r20, 0xD9	; 217
 e36:	31 fd       	sbrc	r19, 1
 e38:	40 52       	subi	r20, 0x20	; 32
 e3a:	41 93       	st	Z+, r20
 e3c:	02 d0       	rcall	.+4      	; 0xe42 <__ultoa_invert+0x84>
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__ultoa_invert+0x6c>
 e40:	ea cf       	rjmp	.-44     	; 0xe16 <__ultoa_invert+0x58>
 e42:	b4 e0       	ldi	r27, 0x04	; 4
 e44:	a6 95       	lsr	r26
 e46:	97 95       	ror	r25
 e48:	87 95       	ror	r24
 e4a:	77 95       	ror	r23
 e4c:	67 95       	ror	r22
 e4e:	ba 95       	dec	r27
 e50:	c9 f7       	brne	.-14     	; 0xe44 <__ultoa_invert+0x86>
 e52:	00 97       	sbiw	r24, 0x00	; 0
 e54:	61 05       	cpc	r22, r1
 e56:	71 05       	cpc	r23, r1
 e58:	08 95       	ret
 e5a:	9b 01       	movw	r18, r22
 e5c:	ac 01       	movw	r20, r24
 e5e:	0a 2e       	mov	r0, r26
 e60:	06 94       	lsr	r0
 e62:	57 95       	ror	r21
 e64:	47 95       	ror	r20
 e66:	37 95       	ror	r19
 e68:	27 95       	ror	r18
 e6a:	ba 95       	dec	r27
 e6c:	c9 f7       	brne	.-14     	; 0xe60 <__ultoa_invert+0xa2>
 e6e:	62 0f       	add	r22, r18
 e70:	73 1f       	adc	r23, r19
 e72:	84 1f       	adc	r24, r20
 e74:	95 1f       	adc	r25, r21
 e76:	a0 1d       	adc	r26, r0
 e78:	08 95       	ret

00000e7a <eeprom_read_byte>:
 e7a:	e1 99       	sbic	0x1c, 1	; 28
 e7c:	fe cf       	rjmp	.-4      	; 0xe7a <eeprom_read_byte>
 e7e:	9f bb       	out	0x1f, r25	; 31
 e80:	8e bb       	out	0x1e, r24	; 30
 e82:	e0 9a       	sbi	0x1c, 0	; 28
 e84:	99 27       	eor	r25, r25
 e86:	8d b3       	in	r24, 0x1d	; 29
 e88:	08 95       	ret

00000e8a <eeprom_write_byte>:
 e8a:	26 2f       	mov	r18, r22

00000e8c <eeprom_write_r18>:
 e8c:	e1 99       	sbic	0x1c, 1	; 28
 e8e:	fe cf       	rjmp	.-4      	; 0xe8c <eeprom_write_r18>
 e90:	9f bb       	out	0x1f, r25	; 31
 e92:	8e bb       	out	0x1e, r24	; 30
 e94:	2d bb       	out	0x1d, r18	; 29
 e96:	0f b6       	in	r0, 0x3f	; 63
 e98:	f8 94       	cli
 e9a:	e2 9a       	sbi	0x1c, 2	; 28
 e9c:	e1 9a       	sbi	0x1c, 1	; 28
 e9e:	0f be       	out	0x3f, r0	; 63
 ea0:	01 96       	adiw	r24, 0x01	; 1
 ea2:	08 95       	ret

00000ea4 <__prologue_saves__>:
 ea4:	2f 92       	push	r2
 ea6:	3f 92       	push	r3
 ea8:	4f 92       	push	r4
 eaa:	5f 92       	push	r5
 eac:	6f 92       	push	r6
 eae:	7f 92       	push	r7
 eb0:	8f 92       	push	r8
 eb2:	9f 92       	push	r9
 eb4:	af 92       	push	r10
 eb6:	bf 92       	push	r11
 eb8:	cf 92       	push	r12
 eba:	df 92       	push	r13
 ebc:	ef 92       	push	r14
 ebe:	ff 92       	push	r15
 ec0:	0f 93       	push	r16
 ec2:	1f 93       	push	r17
 ec4:	cf 93       	push	r28
 ec6:	df 93       	push	r29
 ec8:	cd b7       	in	r28, 0x3d	; 61
 eca:	de b7       	in	r29, 0x3e	; 62
 ecc:	ca 1b       	sub	r28, r26
 ece:	db 0b       	sbc	r29, r27
 ed0:	0f b6       	in	r0, 0x3f	; 63
 ed2:	f8 94       	cli
 ed4:	de bf       	out	0x3e, r29	; 62
 ed6:	0f be       	out	0x3f, r0	; 63
 ed8:	cd bf       	out	0x3d, r28	; 61
 eda:	09 94       	ijmp

00000edc <__epilogue_restores__>:
 edc:	2a 88       	ldd	r2, Y+18	; 0x12
 ede:	39 88       	ldd	r3, Y+17	; 0x11
 ee0:	48 88       	ldd	r4, Y+16	; 0x10
 ee2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ee4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ee6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ee8:	8c 84       	ldd	r8, Y+12	; 0x0c
 eea:	9b 84       	ldd	r9, Y+11	; 0x0b
 eec:	aa 84       	ldd	r10, Y+10	; 0x0a
 eee:	b9 84       	ldd	r11, Y+9	; 0x09
 ef0:	c8 84       	ldd	r12, Y+8	; 0x08
 ef2:	df 80       	ldd	r13, Y+7	; 0x07
 ef4:	ee 80       	ldd	r14, Y+6	; 0x06
 ef6:	fd 80       	ldd	r15, Y+5	; 0x05
 ef8:	0c 81       	ldd	r16, Y+4	; 0x04
 efa:	1b 81       	ldd	r17, Y+3	; 0x03
 efc:	aa 81       	ldd	r26, Y+2	; 0x02
 efe:	b9 81       	ldd	r27, Y+1	; 0x01
 f00:	ce 0f       	add	r28, r30
 f02:	d1 1d       	adc	r29, r1
 f04:	0f b6       	in	r0, 0x3f	; 63
 f06:	f8 94       	cli
 f08:	de bf       	out	0x3e, r29	; 62
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	cd bf       	out	0x3d, r28	; 61
 f0e:	ed 01       	movw	r28, r26
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
